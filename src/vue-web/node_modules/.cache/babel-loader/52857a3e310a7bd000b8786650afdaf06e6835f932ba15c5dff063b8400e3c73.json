{"ast":null,"code":"import { sendMessageToGpt } from '@/api/chatWithGpt';\nimport { v4 as uuidv4 } from 'uuid';\nexport default {\n  name: 'Chat',\n  data() {\n    return {\n      isChatting: false,\n      message: '',\n      recognition: null,\n      // 用于语音识别\n      sessionId: uuidv4()\n    };\n  },\n  methods: {\n    toggleChat() {\n      if (this.isChatting) {\n        this.stopListening();\n      } else {\n        this.startListening();\n        this.isChatting = true;\n      }\n    },\n    startListening() {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      if (!SpeechRecognition) {\n        alert('该浏览器不支持 WebSpeech API。');\n        return;\n      }\n      this.recognition = new SpeechRecognition();\n      this.recognition.lang = 'zh-CN';\n      this.recognition.continuous = false;\n      this.recognition.interimResults = false;\n      this.recognition.onresult = event => {\n        this.message = event.results[0][0].transcript;\n        console.log('识别到的语音内容', this.message);\n        if (this.message.trim() !== '') {\n          this.sendMessage();\n        } else {\n          console.log('本轮无语音输入，不发送消息');\n        }\n        this.message = '';\n      };\n      this.recognition.onerror = event => {\n        console.error('本轮语音识别错误:', event.error);\n      };\n      this.recognition.onend = () => {\n        if (this.isChatting && !this.isPaused) {\n          console.log('本轮语音识别结束，重新开始Listening。');\n          this.startListening();\n        }\n      };\n      this.recognition.start();\n    },\n    stopListening() {\n      if (this.recognition) {\n        this.recognition.stop();\n      }\n\n      // 停止语音合成\n      if (window.speechSynthesis.speaking) {\n        window.speechSynthesis.cancel(); // 停止当前正在播放的语音\n        console.log('语音合成已停止');\n      }\n      this.isChatting = false;\n      console.log('语音识别已停止');\n    },\n    // 暂停语音识别，不完全停止\n    pauseListening() {\n      if (this.recognition) {\n        this.recognition.abort(); // 终止当前识别，但保留识别对象\n        this.isPaused = true; // 标记为暂停状态\n        console.log('语音识别已暂停');\n      }\n    },\n    // 恢复语音识别\n    resumeListening() {\n      if (this.isPaused) {\n        this.isPaused = false;\n        this.startListening();\n        console.log('语音识别已恢复');\n      }\n    },\n    async sendMessage() {\n      if (this.message.trim() === '') return;\n      const sessionId = this.getSessionId();\n      try {\n        const response = await sendMessageToGpt(this.message, sessionId);\n        console.log(response.data.content);\n        this.speak(response.data.content);\n      } catch (error) {\n        console.error('发送消息时出错:', error);\n      }\n    },\n    speak(text) {\n      const synthesis = window.speechSynthesis;\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = 'zh-CN';\n\n      // 暂停语音识别\n      this.pauseListening();\n      utterance.onend = () => {\n        console.log('语音合成播放完毕');\n        // 延迟1秒后恢复语音识别\n        this.resumeListening();\n      };\n      synthesis.speak(utterance);\n    },\n    getSessionId() {\n      return 'session-id-placeholder';\n    }\n  }\n};","map":{"version":3,"names":["sendMessageToGpt","v4","uuidv4","name","data","isChatting","message","recognition","sessionId","methods","toggleChat","stopListening","startListening","SpeechRecognition","window","webkitSpeechRecognition","alert","lang","continuous","interimResults","onresult","event","results","transcript","console","log","trim","sendMessage","onerror","error","onend","isPaused","start","stop","speechSynthesis","speaking","cancel","pauseListening","abort","resumeListening","getSessionId","response","content","speak","text","synthesis","utterance","SpeechSynthesisUtterance"],"sources":["src/views/AI chat/Chat.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <main class=\"main-content\">\r\n      <div class=\"video-chat\">\r\n        <img src=\"@/assets/video-chat.png\" alt=\"Video Chat\" class=\"video-image\" />\r\n        <div class=\"video-overlay\">\r\n          <p class=\"overlay-text\" v-if=\"!isChatting\">点击通话按钮与蓝心小v聊天</p>\r\n          <p class=\"overlay-text\" v-if=\"isChatting\">李奶奶您正在与蓝心小v进行聊天</p>\r\n          <p class=\"status-text\" v-show=\"isChatting\">正在通话中......</p>\r\n          <div class=\"call-buttons\">\r\n            <button\r\n                class=\"call-button\"\r\n                :class=\"isChatting ? 'red' : 'green'\"\r\n                @click=\"toggleChat\"\r\n            ></button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { sendMessageToGpt } from '@/api/chatWithGpt';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport default {\r\n  name: 'Chat',\r\n  data() {\r\n    return {\r\n      isChatting: false,\r\n      message: '',\r\n      recognition: null, // 用于语音识别\r\n      sessionId: uuidv4(),\r\n    };\r\n  },\r\n  methods: {\r\n    toggleChat() {\r\n      if (this.isChatting) {\r\n        this.stopListening();\r\n      } else {\r\n        this.startListening();\r\n        this.isChatting = true;\r\n      }\r\n    },\r\n\r\n    startListening() {\r\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n      if (!SpeechRecognition) {\r\n        alert('该浏览器不支持 WebSpeech API。');\r\n        return;\r\n      }\r\n\r\n      this.recognition = new SpeechRecognition();\r\n      this.recognition.lang = 'zh-CN';\r\n      this.recognition.continuous = false;\r\n      this.recognition.interimResults = false;\r\n\r\n      this.recognition.onresult = (event) => {\r\n        this.message = event.results[0][0].transcript;\r\n        console.log('识别到的语音内容', this.message);\r\n\r\n        if (this.message.trim() !== '') {\r\n          this.sendMessage();\r\n        } else {\r\n          console.log('本轮无语音输入，不发送消息');\r\n        }\r\n        this.message = '';\r\n      };\r\n\r\n      this.recognition.onerror = (event) => {\r\n        console.error('本轮语音识别错误:', event.error);\r\n      };\r\n\r\n      this.recognition.onend = () => {\r\n        if (this.isChatting && !this.isPaused) {\r\n          console.log('本轮语音识别结束，重新开始Listening。');\r\n          this.startListening();\r\n        }\r\n      };\r\n\r\n      this.recognition.start();\r\n    },\r\n\r\n    stopListening() {\r\n      if (this.recognition) {\r\n        this.recognition.stop();\r\n      }\r\n\r\n      // 停止语音合成\r\n      if (window.speechSynthesis.speaking) {\r\n        window.speechSynthesis.cancel(); // 停止当前正在播放的语音\r\n        console.log('语音合成已停止');\r\n      }\r\n\r\n      this.isChatting = false;\r\n      console.log('语音识别已停止');\r\n    },\r\n\r\n    // 暂停语音识别，不完全停止\r\n    pauseListening() {\r\n      if (this.recognition) {\r\n        this.recognition.abort();  // 终止当前识别，但保留识别对象\r\n        this.isPaused = true;      // 标记为暂停状态\r\n        console.log('语音识别已暂停');\r\n      }\r\n    },\r\n\r\n    // 恢复语音识别\r\n    resumeListening() {\r\n      if (this.isPaused) {\r\n        this.isPaused = false;\r\n        this.startListening();\r\n        console.log('语音识别已恢复');\r\n      }\r\n    },\r\n\r\n    async sendMessage() {\r\n      if (this.message.trim() === '') return;\r\n\r\n      const sessionId = this.getSessionId();\r\n      try {\r\n        const response = await sendMessageToGpt(this.message, sessionId);\r\n        console.log(response.data.content);\r\n        this.speak(response.data.content);\r\n      } catch (error) {\r\n        console.error('发送消息时出错:', error);\r\n      }\r\n    },\r\n\r\n    speak(text) {\r\n      const synthesis = window.speechSynthesis;\r\n      const utterance = new SpeechSynthesisUtterance(text);\r\n      utterance.lang = 'zh-CN';\r\n\r\n      // 暂停语音识别\r\n      this.pauseListening();\r\n\r\n      utterance.onend = () => {\r\n        console.log('语音合成播放完毕');\r\n        // 延迟1秒后恢复语音识别\r\n        this.resumeListening();\r\n      };\r\n\r\n      synthesis.speak(utterance);\r\n    },\r\n\r\n    getSessionId() {\r\n      return 'session-id-placeholder';\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#app {\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: 0 auto;\r\n  background-color: #ffe9e9;\r\n}\r\n\r\n.main-content {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: calc(100% - 160px);\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.video-chat {\r\n  position: relative;\r\n  width: 1184px;\r\n  height: 666px;\r\n  border-radius: 20px;\r\n  overflow: hidden;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.video-image {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.video-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.overlay-text {\r\n  margin: 0;\r\n  padding: 10px 20px;\r\n  background: rgba(0, 0, 0, 0.6);\r\n  color: #fff;\r\n  border-radius: 10px;\r\n}\r\n\r\n.status-text {\r\n  margin: 20px 0;\r\n  padding: 10px 20px;\r\n  background: rgba(0, 0, 0, 0.6);\r\n  color: #fff;\r\n  border-radius: 10px;\r\n}\r\n\r\n.call-buttons {\r\n  display: flex;\r\n  margin-top: 20px;\r\n}\r\n\r\n.call-button {\r\n  width: 60px;\r\n  height: 60px;\r\n  border-radius: 50%;\r\n  border: none;\r\n  cursor: pointer;\r\n  background-size: cover;\r\n}\r\n\r\n.call-button.green {\r\n  background-image: url('@/assets/call.png');\r\n}\r\n\r\n.call-button.red {\r\n  background-image: url('@/assets/hangUp.png');\r\n}\r\n</style>"],"mappings":"AAuBA,SAAAA,gBAAA;AACA,SAAAC,EAAA,IAAAC,MAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,UAAA;MACAC,OAAA;MACAC,WAAA;MAAA;MACAC,SAAA,EAAAN,MAAA;IACA;EACA;EACAO,OAAA;IACAC,WAAA;MACA,SAAAL,UAAA;QACA,KAAAM,aAAA;MACA;QACA,KAAAC,cAAA;QACA,KAAAP,UAAA;MACA;IACA;IAEAO,eAAA;MACA,MAAAC,iBAAA,GAAAC,MAAA,CAAAD,iBAAA,IAAAC,MAAA,CAAAC,uBAAA;MACA,KAAAF,iBAAA;QACAG,KAAA;QACA;MACA;MAEA,KAAAT,WAAA,OAAAM,iBAAA;MACA,KAAAN,WAAA,CAAAU,IAAA;MACA,KAAAV,WAAA,CAAAW,UAAA;MACA,KAAAX,WAAA,CAAAY,cAAA;MAEA,KAAAZ,WAAA,CAAAa,QAAA,GAAAC,KAAA;QACA,KAAAf,OAAA,GAAAe,KAAA,CAAAC,OAAA,OAAAC,UAAA;QACAC,OAAA,CAAAC,GAAA,kBAAAnB,OAAA;QAEA,SAAAA,OAAA,CAAAoB,IAAA;UACA,KAAAC,WAAA;QACA;UACAH,OAAA,CAAAC,GAAA;QACA;QACA,KAAAnB,OAAA;MACA;MAEA,KAAAC,WAAA,CAAAqB,OAAA,GAAAP,KAAA;QACAG,OAAA,CAAAK,KAAA,cAAAR,KAAA,CAAAQ,KAAA;MACA;MAEA,KAAAtB,WAAA,CAAAuB,KAAA;QACA,SAAAzB,UAAA,UAAA0B,QAAA;UACAP,OAAA,CAAAC,GAAA;UACA,KAAAb,cAAA;QACA;MACA;MAEA,KAAAL,WAAA,CAAAyB,KAAA;IACA;IAEArB,cAAA;MACA,SAAAJ,WAAA;QACA,KAAAA,WAAA,CAAA0B,IAAA;MACA;;MAEA;MACA,IAAAnB,MAAA,CAAAoB,eAAA,CAAAC,QAAA;QACArB,MAAA,CAAAoB,eAAA,CAAAE,MAAA;QACAZ,OAAA,CAAAC,GAAA;MACA;MAEA,KAAApB,UAAA;MACAmB,OAAA,CAAAC,GAAA;IACA;IAEA;IACAY,eAAA;MACA,SAAA9B,WAAA;QACA,KAAAA,WAAA,CAAA+B,KAAA;QACA,KAAAP,QAAA;QACAP,OAAA,CAAAC,GAAA;MACA;IACA;IAEA;IACAc,gBAAA;MACA,SAAAR,QAAA;QACA,KAAAA,QAAA;QACA,KAAAnB,cAAA;QACAY,OAAA,CAAAC,GAAA;MACA;IACA;IAEA,MAAAE,YAAA;MACA,SAAArB,OAAA,CAAAoB,IAAA;MAEA,MAAAlB,SAAA,QAAAgC,YAAA;MACA;QACA,MAAAC,QAAA,SAAAzC,gBAAA,MAAAM,OAAA,EAAAE,SAAA;QACAgB,OAAA,CAAAC,GAAA,CAAAgB,QAAA,CAAArC,IAAA,CAAAsC,OAAA;QACA,KAAAC,KAAA,CAAAF,QAAA,CAAArC,IAAA,CAAAsC,OAAA;MACA,SAAAb,KAAA;QACAL,OAAA,CAAAK,KAAA,aAAAA,KAAA;MACA;IACA;IAEAc,MAAAC,IAAA;MACA,MAAAC,SAAA,GAAA/B,MAAA,CAAAoB,eAAA;MACA,MAAAY,SAAA,OAAAC,wBAAA,CAAAH,IAAA;MACAE,SAAA,CAAA7B,IAAA;;MAEA;MACA,KAAAoB,cAAA;MAEAS,SAAA,CAAAhB,KAAA;QACAN,OAAA,CAAAC,GAAA;QACA;QACA,KAAAc,eAAA;MACA;MAEAM,SAAA,CAAAF,KAAA,CAAAG,SAAA;IACA;IAEAN,aAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}