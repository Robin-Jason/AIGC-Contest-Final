{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nexport default {\n  data() {\n    return {\n      cells: Array.from({\n        length: 81\n      }, () => ({\n        value: 0,\n        fixed: false\n      })),\n      difficulty: 'easy',\n      // 默认难度\n      timer: null,\n      elapsedTime: 0,\n      historyRecords: [{\n        date: '2024-05-10',\n        difficulty: '简单',\n        time: 300,\n        result: '成功'\n      }, {\n        date: '2024-05-11',\n        difficulty: '中等',\n        time: 450,\n        result: '失败'\n      }, {\n        date: '2024-05-12',\n        difficulty: '困难',\n        time: 600,\n        result: '成功'\n      }, {\n        date: '2024-05-13',\n        difficulty: '简单',\n        time: 200,\n        result: '成功'\n      }, {\n        date: '2024-05-14',\n        difficulty: '中等',\n        time: 400,\n        result: '失败'\n      }, {\n        date: '2024-05-15',\n        difficulty: '困难',\n        time: 550,\n        result: '成功'\n      }]\n    };\n  },\n  created() {\n    this.generateSudoku();\n    this.startTimer();\n  },\n  methods: {\n    generateSudoku() {\n      let puzzle, solution;\n      do {\n        puzzle = sudoku.makepuzzle();\n        solution = sudoku.solvepuzzle(puzzle);\n      } while (!solution);\n      this.cells = puzzle.map((value, index) => ({\n        value: value === null ? 0 : value + 1,\n        fixed: value !== null\n      }));\n      this.solution = solution.map(value => value + 1);\n      this.resetTimer();\n      this.startTimer();\n    },\n    resetGame() {\n      this.cells.forEach(cell => {\n        if (!cell.fixed) {\n          cell.value = 0;\n        }\n      });\n    },\n    checkSolution() {\n      const validGroup = group => {\n        const seen = new Set();\n        for (let i = 0; i < 9; i++) {\n          const num = group[i].value;\n          if (num < 1 || num > 9 || seen.has(num)) return false;\n          seen.add(num);\n        }\n        return true;\n      };\n      for (let i = 0; i < 9; i++) {\n        const row = this.cells.slice(i * 9, i * 9 + 9);\n        const col = this.cells.filter((_, index) => index % 9 === i);\n        const box = this.cells.filter((_, index) => Math.floor(index / 27) === Math.floor(i / 3) && Math.floor(index % 9 / 3) === i % 3);\n        if (!validGroup(row) || !validGroup(col) || !validGroup(box)) {\n          alert('解答错误，请再试一次！');\n          return false;\n        }\n      }\n      alert('恭喜你，解答正确！');\n      this.recordHistory('成功');\n      return true;\n    },\n    startTimer() {\n      this.timer = setInterval(() => {\n        this.elapsedTime++;\n      }, 1000);\n    },\n    resetTimer() {\n      clearInterval(this.timer);\n      this.elapsedTime = 0;\n    },\n    handleKeyPress(event, index) {\n      if (!/[1-9]/.test(event.key)) {\n        event.preventDefault();\n      }\n    },\n    provideHint() {\n      const emptyCells = this.cells.filter(cell => cell.value === 0);\n      if (emptyCells.length === 0) return;\n      const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n      const randomCellIndex = this.cells.indexOf(randomCell);\n      this.cells[randomCellIndex].value = this.solution[randomCellIndex];\n    },\n    recordHistory(result) {\n      const date = new Date().toISOString().split('T')[0];\n      this.historyRecords.push({\n        date,\n        difficulty: this.difficulty,\n        time: this.elapsedTime,\n        result\n      });\n    }\n  },\n  beforeDestroy() {\n    clearInterval(this.timer);\n  }\n};","map":{"version":3,"names":["data","cells","Array","from","length","value","fixed","difficulty","timer","elapsedTime","historyRecords","date","time","result","created","generateSudoku","startTimer","methods","puzzle","solution","sudoku","makepuzzle","solvepuzzle","map","index","resetTimer","resetGame","forEach","cell","checkSolution","validGroup","group","seen","Set","i","num","has","add","row","slice","col","filter","_","box","Math","floor","alert","recordHistory","setInterval","clearInterval","handleKeyPress","event","test","key","preventDefault","provideHint","emptyCells","randomCell","random","randomCellIndex","indexOf","Date","toISOString","split","push","beforeDestroy"],"sources":["src/views/Game/Sudoku.vue"],"sourcesContent":["<template>\n  <div class=\"sudoku-container\">\n    <div class=\"header\">\n      欢迎来到数独游戏训练\n    </div>\n    <div class=\"main-content\">\n      <div class=\"left-panel\">\n        <el-card class=\"sudoku-card\">\n          <div class=\"profile-section\">\n            <!-- 添加难度选择下拉菜单 -->\n            <el-select v-model=\"difficulty\" placeholder=\"选择难度\">\n              <el-option label=\"简单\" value=\"easy\"></el-option>\n              <el-option label=\"中等\" value=\"medium\"></el-option>\n              <el-option label=\"困难\" value=\"hard\"></el-option>\n            </el-select>\n            <!-- 显示计时器 -->\n            <div class=\"timer\">时间: {{ elapsedTime }} 秒</div>\n          </div>\n          <div class=\"game-and-buttons\">\n            <div class=\"game-area\">\n              <div class=\"sudoku-grid\">\n                <div\n                    v-for=\"(cell, index) in cells\"\n                    :key=\"index\"\n                    class=\"sudoku-cell\"\n                    :class=\"{ fixed: cell.fixed }\"\n                >\n                  <input\n                      ref=\"input-{{ index }}\"\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"9\"\n                      v-model.number=\"cell.value\"\n                      :disabled=\"cell.fixed\"\n                      @keypress=\"handleKeyPress($event, index)\"\n                  />\n                </div>\n              </div>\n            </div>\n            <div class=\"button-section\">\n              <div class=\"button-group\">\n                <el-button class=\"button\" type=\"primary\" @click=\"generateSudoku\">生成</el-button>\n                <el-button class=\"button\" type=\"warning\" @click=\"resetGame\">重置</el-button>\n                <el-button class=\"button\" type=\"info\">填充</el-button>\n                <el-button class=\"button\" type=\"default\" @click=\"provideHint\">提示</el-button>\n                <el-button class=\"button\" type=\"primary\">检查</el-button>\n                <el-button class=\"button\" type=\"primary\" @click=\"checkSolution\">验证</el-button>\n              </div>\n            </div>\n          </div>\n        </el-card>\n      </div>\n      <div class=\"right-panel\">\n        <div class=\"history\">\n          历史训练记录\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n\nexport default {\n  data() {\n    return {\n      cells: Array.from({ length: 81 }, () => ({ value: 0, fixed: false })),\n      difficulty: 'easy', // 默认难度\n      timer: null,\n      elapsedTime: 0,\n      historyRecords: [\n        { date: '2024-05-10', difficulty: '简单', time: 300, result: '成功' },\n        { date: '2024-05-11', difficulty: '中等', time: 450, result: '失败' },\n        { date: '2024-05-12', difficulty: '困难', time: 600, result: '成功' },\n        { date: '2024-05-13', difficulty: '简单', time: 200, result: '成功' },\n        { date: '2024-05-14', difficulty: '中等', time: 400, result: '失败' },\n        { date: '2024-05-15', difficulty: '困难', time: 550, result: '成功' },\n      ],\n    };\n  },\n  created() {\n    this.generateSudoku();\n    this.startTimer();\n  },\n  methods: {\n    generateSudoku() {\n      let puzzle, solution;\n      do {\n        puzzle = sudoku.makepuzzle();\n        solution = sudoku.solvepuzzle(puzzle);\n      } while (!solution);\n\n      this.cells = puzzle.map((value, index) => ({\n        value: value === null ? 0 : value + 1,\n        fixed: value !== null,\n      }));\n      this.solution = solution.map(value => value + 1);\n      this.resetTimer();\n      this.startTimer();\n    },\n    resetGame() {\n      this.cells.forEach((cell) => {\n        if (!cell.fixed) {\n          cell.value = 0;\n        }\n      });\n    },\n    checkSolution() {\n      const validGroup = (group) => {\n        const seen = new Set();\n        for (let i = 0; i < 9; i++) {\n          const num = group[i].value;\n          if (num < 1 || num > 9 || seen.has(num)) return false;\n          seen.add(num);\n        }\n        return true;\n      };\n\n      for (let i = 0; i < 9; i++) {\n        const row = this.cells.slice(i * 9, i * 9 + 9);\n        const col = this.cells.filter((_, index) => index % 9 === i);\n        const box = this.cells.filter((_, index) =>\n            Math.floor(index / 27) === Math.floor(i / 3) &&\n            Math.floor(index % 9 / 3) === i % 3\n        );\n        if (!validGroup(row) || !validGroup(col) || !validGroup(box)) {\n          alert('解答错误，请再试一次！');\n          return false;\n        }\n      }\n      alert('恭喜你，解答正确！');\n      this.recordHistory('成功');\n      return true;\n    },\n    startTimer() {\n      this.timer = setInterval(() => {\n        this.elapsedTime++;\n      }, 1000);\n    },\n    resetTimer() {\n      clearInterval(this.timer);\n      this.elapsedTime = 0;\n    },\n    handleKeyPress(event, index) {\n      if (!/[1-9]/.test(event.key)) {\n        event.preventDefault();\n      }\n    },\n    provideHint() {\n      const emptyCells = this.cells.filter(cell => cell.value === 0);\n      if (emptyCells.length === 0) return;\n      const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n      const randomCellIndex = this.cells.indexOf(randomCell);\n      this.cells[randomCellIndex].value = this.solution[randomCellIndex];\n    },\n    recordHistory(result) {\n      const date = new Date().toISOString().split('T')[0];\n      this.historyRecords.push({\n        date,\n        difficulty: this.difficulty,\n        time: this.elapsedTime,\n        result\n      });\n    }\n  },\n  beforeDestroy() {\n    clearInterval(this.timer);\n  },\n};\n</script>\n\n<style scoped>\n.sudoku-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  background-color: #fff6f3;\n}\n\n.header, .left-panel, .right-panel, .footer {\n  background-color: #fff;\n  border: 1px solid #dcdcdc;\n  padding: 20px;\n  margin: 10px;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.main-content {\n  display: flex;\n  width: 100%;\n  justify-content: space-around;\n}\n\n.left-panel, .right-panel {\n  flex: 1;\n  background-color: #f7ebe4\n}\n\n.right-panel{\n  background-color: #fbf5f2;\n}\n\n.footer {\n  display: flex;\n  justify-content: space-around;\n  width: 100%;\n}\n\n.footer-button {\n  margin: 5px;\n}\n\n.sudoku-card {\n  width: 100%;\n}\n\n.profile-section {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.timer {\n  font-size: 1.2em;\n  font-weight: bold;\n}\n\n.game-area {\n  margin-top: 20px;\n}\n\n.sudoku-grid {\n  display: grid;\n  grid-template-columns: repeat(9, 1fr);\n  gap: 5px;\n}\n\n.sudoku-cell {\n  width: 40px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.sudoku-cell input {\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  font-size: 1.2em;\n}\n\n.sudoku-cell.fixed input {\n  background-color: #e0e0e0;\n}\n\n.button-section {\n  margin-top: 20px;\n}\n\n.button-group {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.history {\n  font-size: 1em;\n  font-weight: bold;\n  text-align: center;\n}\n\n.history-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 10px;\n}\n\n.history-table th, .history-table td {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: center;\n}\n\n.history-table th {\n  background-color: #f2f2f2;\n}\n\n.history-table tr:nth-child(even) {\n  background-color: #f9f9f9;\n}\n\n.history-table tr:hover {\n  background-color: #ddd;\n}\n\n.footer{\n  width: 80%;\n  background-color: #f7ebe4;\n}\n\n.footer-button:hover{\n  color: #f3d59f;\n}\n\n.footer-button{\n  background-color: #fbf5f2;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}