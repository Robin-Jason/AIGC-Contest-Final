{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport FooterComponent from '@/layout/FooterComponent.vue';\nimport HeaderComponent from '@/layout/HeaderComponent.vue';\nexport default {\n  components: {\n    HeaderComponent,\n    FooterComponent\n  },\n  data() {\n    return {\n      board: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n    };\n  },\n  mounted() {\n    this.addTile();\n    this.addTile();\n    window.addEventListener('keydown', this.handleKeyPress);\n  },\n  beforeDestroy() {\n    window.removeEventListener('keydown', this.handleKeyPress);\n  },\n  methods: {\n    getColor(value) {\n      const colors = {\n        0: '#cdc1b4',\n        2: '#eee4da',\n        4: '#ede0c8',\n        8: '#f2b179',\n        16: '#f59563',\n        32: '#f67c5f',\n        64: '#f65e3b',\n        128: '#edcf72',\n        256: '#edcc61',\n        512: '#edc850',\n        1024: '#edc53f',\n        2048: '#edc22e'\n      };\n      return colors[value] || '#3c3a32';\n    },\n    addTile() {\n      const emptyCells = [];\n      this.board.forEach((row, rowIndex) => {\n        row.forEach((cell, cellIndex) => {\n          if (cell === 0) {\n            emptyCells.push({\n              rowIndex,\n              cellIndex\n            });\n          }\n        });\n      });\n      if (emptyCells.length) {\n        const {\n          rowIndex,\n          cellIndex\n        } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.$set(this.board[rowIndex], cellIndex, Math.random() > 0.9 ? 4 : 2);\n      }\n    },\n    handleKeyPress(event) {\n      // 阻止页面滚动\n      event.preventDefault();\n      let moved = false;\n      switch (event.key) {\n        case 'ArrowUp':\n          moved = this.moveUp();\n          break;\n        case 'ArrowDown':\n          moved = this.moveDown();\n          break;\n        case 'ArrowLeft':\n          moved = this.moveLeft();\n          break;\n        case 'ArrowRight':\n          moved = this.moveRight();\n          break;\n      }\n      if (moved) {\n        this.addTile();\n        if (this.checkWin()) {\n          alert(\"恭喜，您已通关!\");\n          this.resetGame();\n        } else if (!this.canMove()) {\n          alert(\"无法移动，请再试一次！\");\n          this.resetGame();\n        }\n      }\n    },\n    compress(row) {\n      const newRow = row.filter(cell => cell !== 0);\n      while (newRow.length < 4) newRow.push(0);\n      return newRow;\n    },\n    merge(row) {\n      for (let i = 0; i < 3; i++) {\n        if (row[i] !== 0 && row[i] === row[i + 1]) {\n          row[i] *= 2;\n          row[i + 1] = 0;\n        }\n      }\n      return row;\n    },\n    moveLeft() {\n      let moved = false;\n      for (let i = 0; i < 4; i++) {\n        let column = this.board.map(row => row[i]);\n        column = this.compress(column);\n        column = this.merge(column);\n        column = this.compress(column);\n        for (let j = 0; j < 4; j++) {\n          if (this.board[j][i] !== column[j]) moved = true;\n        }\n        for (let j = 0; j < 4; j++) {\n          this.$set(this.board[j], i, column[j]);\n        }\n      }\n      return moved;\n    },\n    moveRight() {\n      let moved = false;\n      for (let i = 0; i < 4; i++) {\n        let column = this.board.map(row => row[i]).reverse();\n        column = this.compress(column);\n        column = this.merge(column);\n        column = this.compress(column);\n        column.reverse();\n        for (let j = 0; j < 4; j++) {\n          if (this.board[j][i] !== column[j]) moved = true;\n        }\n        for (let j = 0; j < 4; j++) {\n          this.$set(this.board[j], i, column[j]);\n        }\n      }\n      return moved;\n    },\n    moveUp() {\n      let moved = false;\n      for (let i = 0; i < 4; i++) {\n        let row = this.board[i];\n        row = this.compress(row);\n        row = this.merge(row);\n        row = this.compress(row);\n        if (this.board[i].toString() !== row.toString()) moved = true;\n        this.$set(this.board, i, row);\n      }\n      return moved;\n    },\n    moveDown() {\n      let moved = false;\n      for (let i = 0; i < 4; i++) {\n        let row = this.board[i].slice().reverse();\n        row = this.compress(row);\n        row = this.merge(row);\n        row = this.compress(row);\n        row.reverse();\n        if (this.board[i].toString() !== row.toString()) moved = true;\n        this.$set(this.board, i, row);\n      }\n      return moved;\n    },\n    resetGame() {\n      this.board = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n      this.addTile();\n      this.addTile();\n    },\n    checkWin() {\n      return this.board.some(row => row.includes(2048));\n    },\n    canMove() {\n      // 检查是否可以移动\n      const directions = ['Left', 'Right', 'Up', 'Down'];\n      return directions.some(direction => {\n        const boardCopy = this.board.map(row => [...row]);\n        let moved = false;\n        switch (direction) {\n          case 'Left':\n            moved = this.moveLeft();\n            break;\n          case 'Right':\n            moved = this.moveRight();\n            break;\n          case 'Up':\n            moved = this.moveUp();\n            break;\n          case 'Down':\n            moved = this.moveDown();\n            break;\n        }\n        this.board = boardCopy; // 恢复原始状态\n        return moved;\n      });\n    }\n  }\n};","map":{"version":3,"names":["FooterComponent","HeaderComponent","components","data","board","mounted","addTile","window","addEventListener","handleKeyPress","beforeDestroy","removeEventListener","methods","getColor","value","colors","emptyCells","forEach","row","rowIndex","cell","cellIndex","push","length","Math","floor","random","$set","event","preventDefault","moved","key","moveUp","moveDown","moveLeft","moveRight","checkWin","alert","resetGame","canMove","compress","newRow","filter","merge","i","column","map","j","reverse","toString","slice","some","includes","directions","direction","boardCopy"],"sources":["src/views/Game/2048.vue"],"sourcesContent":["<template>\r\n  <div class=\"game-container\">\r\n    <HeaderComponent class=\"header\" />\r\n    <div class=\"board\">\r\n      <div\r\n          v-for=\"(row, rowIndex) in board\"\r\n          :key=\"rowIndex\"\r\n          class=\"row\"\r\n      >\r\n        <div\r\n            v-for=\"(cell, cellIndex) in row\"\r\n            :key=\"cellIndex\"\r\n            :class=\"['cell', 'tile-' + cell]\"\r\n            :style=\"{ backgroundColor: getColor(cell) }\"\r\n        >\r\n          {{ cell || '' }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <button class=\"reset-button\" @click=\"resetGame\">重新开始</button>\r\n    <FooterComponent class=\"footer\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport FooterComponent from '@/layout/FooterComponent.vue';\r\nimport HeaderComponent from '@/layout/HeaderComponent.vue';\r\n\r\nexport default {\r\n  components: {\r\n    HeaderComponent,\r\n    FooterComponent,\r\n  },\r\n  data() {\r\n    return {\r\n      board: [\r\n        [0, 0, 0, 0],\r\n        [0, 0, 0, 0],\r\n        [0, 0, 0, 0],\r\n        [0, 0, 0, 0],\r\n      ],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.addTile();\r\n    this.addTile();\r\n    window.addEventListener('keydown', this.handleKeyPress);\r\n  },\r\n  beforeDestroy() {\r\n    window.removeEventListener('keydown', this.handleKeyPress);\r\n  },\r\n  methods: {\r\n    getColor(value) {\r\n      const colors = {\r\n        0: '#cdc1b4',\r\n        2: '#eee4da',\r\n        4: '#ede0c8',\r\n        8: '#f2b179',\r\n        16: '#f59563',\r\n        32: '#f67c5f',\r\n        64: '#f65e3b',\r\n        128: '#edcf72',\r\n        256: '#edcc61',\r\n        512: '#edc850',\r\n        1024: '#edc53f',\r\n        2048: '#edc22e',\r\n      };\r\n      return colors[value] || '#3c3a32';\r\n    },\r\n    addTile() {\r\n      const emptyCells = [];\r\n      this.board.forEach((row, rowIndex) => {\r\n        row.forEach((cell, cellIndex) => {\r\n          if (cell === 0) {\r\n            emptyCells.push({rowIndex, cellIndex});\r\n          }\r\n        });\r\n      });\r\n\r\n      if (emptyCells.length) {\r\n        const {rowIndex, cellIndex} = emptyCells[Math.floor(Math.random() * emptyCells.length)];\r\n        this.$set(this.board[rowIndex], cellIndex, Math.random() > 0.9 ? 4 : 2);\r\n      }\r\n    },\r\n    handleKeyPress(event) {\r\n      // 阻止页面滚动\r\n      event.preventDefault();\r\n\r\n      let moved = false;\r\n\r\n      switch (event.key) {\r\n        case 'ArrowUp':\r\n          moved = this.moveUp();\r\n          break;\r\n        case 'ArrowDown':\r\n          moved = this.moveDown();\r\n          break;\r\n        case 'ArrowLeft':\r\n          moved = this.moveLeft();\r\n          break;\r\n        case 'ArrowRight':\r\n          moved = this.moveRight();\r\n          break;\r\n      }\r\n\r\n      if (moved) {\r\n        this.addTile();\r\n        if (this.checkWin()) {\r\n          alert(\"恭喜，您已通关!\");\r\n          this.resetGame();\r\n        } else if (!this.canMove()) {\r\n          alert(\"无法移动，请再试一次！\");\r\n          this.resetGame();\r\n        }\r\n      }\r\n    },\r\n    compress(row) {\r\n      const newRow = row.filter(cell => cell !== 0);\r\n      while (newRow.length < 4) newRow.push(0);\r\n      return newRow;\r\n    },\r\n    merge(row) {\r\n      for (let i = 0; i < 3; i++) {\r\n        if (row[i] !== 0 && row[i] === row[i + 1]) {\r\n          row[i] *= 2;\r\n          row[i + 1] = 0;\r\n        }\r\n      }\r\n      return row;\r\n    },\r\n    moveLeft() {\r\n      let moved = false;\r\n      for (let i = 0; i < 4; i++) {\r\n        let column = this.board.map(row => row[i]);\r\n        column = this.compress(column);\r\n        column = this.merge(column);\r\n        column = this.compress(column);\r\n        for (let j = 0; j < 4; j++) {\r\n          if (this.board[j][i] !== column[j]) moved = true;\r\n        }\r\n        for (let j = 0; j < 4; j++) {\r\n          this.$set(this.board[j], i, column[j]);\r\n        }\r\n      }\r\n      return moved;\r\n    },\r\n    moveRight() {\r\n      let moved = false;\r\n      for (let i = 0; i < 4; i++) {\r\n        let column = this.board.map(row => row[i]).reverse();\r\n        column = this.compress(column);\r\n        column = this.merge(column);\r\n        column = this.compress(column);\r\n        column.reverse();\r\n        for (let j = 0; j < 4; j++) {\r\n          if (this.board[j][i] !== column[j]) moved = true;\r\n        }\r\n        for (let j = 0; j < 4; j++) {\r\n          this.$set(this.board[j], i, column[j]);\r\n        }\r\n      }\r\n      return moved;\r\n    },\r\n    moveUp() {\r\n      let moved = false;\r\n      for (let i = 0; i < 4; i++) {\r\n        let row = this.board[i];\r\n        row = this.compress(row);\r\n        row = this.merge(row);\r\n        row = this.compress(row);\r\n        if (this.board[i].toString() !== row.toString()) moved = true;\r\n        this.$set(this.board, i, row);\r\n      }\r\n      return moved;\r\n    },\r\n    moveDown() {\r\n      let moved = false;\r\n      for (let i = 0; i < 4; i++) {\r\n        let row = this.board[i].slice().reverse();\r\n        row = this.compress(row);\r\n        row = this.merge(row);\r\n        row = this.compress(row);\r\n        row.reverse();\r\n        if (this.board[i].toString() !== row.toString()) moved = true;\r\n        this.$set(this.board, i, row);\r\n      }\r\n      return moved;\r\n    },\r\n    resetGame() {\r\n      this.board = [\r\n        [0, 0, 0, 0],\r\n        [0, 0, 0, 0],\r\n        [0, 0, 0, 0],\r\n        [0, 0, 0, 0],\r\n      ];\r\n      this.addTile();\r\n      this.addTile();\r\n    },\r\n    checkWin() {\r\n      return this.board.some(row => row.includes(2048));\r\n    },\r\n    canMove() {\r\n      // 检查是否可以移动\r\n      const directions = ['Left', 'Right', 'Up', 'Down'];\r\n      return directions.some(direction => {\r\n        const boardCopy = this.board.map(row => [...row]);\r\n        let moved = false;\r\n        switch (direction) {\r\n          case 'Left':\r\n            moved = this.moveLeft();\r\n            break;\r\n          case 'Right':\r\n            moved = this.moveRight();\r\n            break;\r\n          case 'Up':\r\n            moved = this.moveUp();\r\n            break;\r\n          case 'Down':\r\n            moved = this.moveDown();\r\n            break;\r\n        }\r\n        this.board = boardCopy; // 恢复原始状态\r\n        return moved;\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.game-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background-color: #faf8ef;\r\n  padding: 20px;\r\n}\r\n\r\n.header, .footer {\r\n  width: 100%;\r\n}\r\n\r\n.board {\r\n  display: grid;\r\n  grid-template-rows: repeat(4, 180px);\r\n  grid-template-columns: repeat(4, 180px);\r\n  background-color: #bbada0;\r\n  border-radius: 10px;\r\n  margin-bottom: 20px;\r\n  margin-top: 20px;\r\n}\r\n\r\n.cell {\r\n  width: 180px;\r\n  height: 180px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  color: #776e65;\r\n  border-radius: 10px;\r\n  transition: transform 0.2s ease, background-color 0.2s ease;\r\n}\r\n\r\n.reset-button {\r\n  padding: 10px 20px;\r\n  font-size: 18px;\r\n  background-color: #f78f54;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  margin-top: 20px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.reset-button:hover {\r\n  background-color: #d97242;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}