{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport sudoku from 'sudoku';\nexport default {\n  data() {\n    return {\n      cells: Array.from({\n        length: 81\n      }, () => ({\n        value: 0,\n        fixed: false\n      })),\n      difficulty: 'easy',\n      // 默认难度\n      timer: null,\n      elapsedTime: 0,\n      hintsUsed: 0,\n      // 用于跟踪提示次数\n      historyRecords: [] // 历史记录数组\n    };\n  },\n  created() {\n    this.generateSudoku();\n  },\n  methods: {\n    generateSudoku() {\n      let puzzle, solution;\n      do {\n        puzzle = sudoku.makepuzzle();\n        solution = sudoku.solvepuzzle(puzzle);\n      } while (!solution);\n      this.cells = puzzle.map((value, index) => ({\n        value: value === null ? 0 : value + 1,\n        fixed: value !== null\n      }));\n      this.solution = solution.map(value => value + 1);\n      this.resetTimer();\n      this.startTimer();\n    },\n    resetGame() {\n      this.cells.forEach(cell => {\n        if (!cell.fixed) {\n          cell.value = 0;\n        }\n      });\n      this.resetTimer();\n    },\n    startTimer() {\n      if (this.timer) {\n        clearInterval(this.timer); // 确保之前的计时器被清除\n      }\n      this.timer = setInterval(() => {\n        this.elapsedTime++;\n      }, 1000);\n    },\n    resetTimer() {\n      if (this.timer) {\n        clearInterval(this.timer);\n        this.timer = null;\n      }\n      this.elapsedTime = 0;\n    },\n    checkSolution() {\n      const validGroup = group => {\n        const seen = new Set();\n        for (let i = 0; i < 9; i++) {\n          const num = group[i].value;\n          if (num < 1 || num > 9 || seen.has(num)) return false;\n          seen.add(num);\n        }\n        return true;\n      };\n\n      // 检查行、列和小方块\n      for (let i = 0; i < 9; i++) {\n        const row = this.cells.slice(i * 9, i * 9 + 9);\n        const col = this.cells.filter((_, index) => index % 9 === i);\n        const box = this.cells.filter((_, index) => Math.floor(index / 27) === Math.floor(i / 3) && Math.floor(index % 9 / 3) === i % 3);\n        if (!validGroup(row) || !validGroup(col) || !validGroup(box)) {\n          this.$message.error(\"解答错误，请再试一次！\");\n          return;\n        }\n      }\n\n      // 如果解答正确，停止计时器并计算得分\n      clearInterval(this.timer);\n      const date = new Date().toLocaleDateString();\n      const baseScore = 1000;\n      const timePenalty = this.elapsedTime * 2; // 用时惩罚因子\n      const hintPenalty = this.hintsUsed * 50; // 提示次数惩罚因子\n      const score = Math.max(baseScore - timePenalty - hintPenalty, 0); // 确保分数不为负\n\n      // 更新历史记录\n      this.historyRecords.push({\n        date: date,\n        difficulty: this.difficulty === 'easy' ? '简单' : this.difficulty === 'medium' ? '中等' : '困难',\n        time: this.elapsedTime,\n        hints: this.hintsUsed,\n        score: score,\n        result: '成功'\n      });\n      this.$message.success(`恭喜你！解答正确！用时：${this.elapsedTime} 秒，得分：${score}`);\n    },\n    provideHint() {\n      // 示例提示逻辑：找到一个空的可填入的正确值的位置\n      const emptyCells = this.cells.map((cell, index) => ({\n        cell,\n        index\n      })).filter(({\n        cell\n      }) => !cell.fixed && cell.value === 0);\n      if (emptyCells.length > 0) {\n        const randomEmpty = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        const correctValue = this.solution[randomEmpty.index];\n        this.cells[randomEmpty.index].value = correctValue;\n        this.hintsUsed++;\n      } else {\n        this.$message.warning(\"没有可以提示的位置！\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["sudoku","data","cells","Array","from","length","value","fixed","difficulty","timer","elapsedTime","hintsUsed","historyRecords","created","generateSudoku","methods","puzzle","solution","makepuzzle","solvepuzzle","map","index","resetTimer","startTimer","resetGame","forEach","cell","clearInterval","setInterval","checkSolution","validGroup","group","seen","Set","i","num","has","add","row","slice","col","filter","_","box","Math","floor","$message","error","date","Date","toLocaleDateString","baseScore","timePenalty","hintPenalty","score","max","push","time","hints","result","success","provideHint","emptyCells","randomEmpty","random","correctValue","warning"],"sources":["src/views/Game/Sudoku.vue"],"sourcesContent":["<template>\n  <div class=\"sudoku-container\">\n    <div class=\"header\">\n      欢迎来到数独游戏训练\n    </div>\n    <div class=\"main-content\">\n      <div class=\"left-panel\">\n        <el-card class=\"sudoku-card\">\n          <div class=\"profile-section\">\n            <!-- 添加难度选择下拉菜单 -->\n            <el-select v-model=\"difficulty\" placeholder=\"选择难度\">\n              <el-option label=\"简单\" value=\"easy\"></el-option>\n              <el-option label=\"中等\" value=\"medium\"></el-option>\n              <el-option label=\"困难\" value=\"hard\"></el-option>\n            </el-select>\n            <!-- 显示计时器 -->\n            <div class=\"timer\">时间: {{ elapsedTime }} 秒</div>\n          </div>\n          <div class=\"game-and-buttons\">\n            <div class=\"game-area\">\n              <div class=\"sudoku-grid\">\n                <div\n                    v-for=\"(cell, index) in cells\"\n                    :key=\"index\"\n                    class=\"sudoku-cell\"\n                    :class=\"{ fixed: cell.fixed }\"\n                >\n                  <input\n                      ref=\"input-{{ index }}\"\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"9\"\n                      v-model.number=\"cell.value\"\n                      :disabled=\"cell.fixed\"\n                      @keypress=\"handleKeyPress($event, index)\"\n                  />\n                </div>\n              </div>\n            </div>\n            <div class=\"button-section\">\n              <div class=\"button-group\">\n                <el-button class=\"button\" type=\"primary\" @click=\"generateSudoku\">生成</el-button>\n                <el-button class=\"button\" type=\"warning\" @click=\"resetGame\">重置</el-button>\n                <el-button class=\"button\" type=\"info\" @click=\"fillGrid\">填充</el-button>\n                <el-button class=\"button\" type=\"default\" @click=\"provideHint\">提示</el-button>\n                <el-button class=\"button\" type=\"primary\">检查</el-button>\n                <el-button class=\"button\" type=\"primary\" @click=\"checkSolution\">验证</el-button>\n              </div>\n            </div>\n          </div>\n        </el-card>\n      </div>\n      <div class=\"right-panel\">\n        <div class=\"history\">\n          历史训练记录\n          <ul>\n            <li v-for=\"(record, index) in historyRecords\" :key=\"index\">\n              {{ record.date }} - 难度: {{ record.difficulty }} - 用时: {{ record.time }}秒 - 提示: {{ record.hints }}次 - 分数: {{ record.score }} - 结果: {{ record.result }}\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport sudoku from 'sudoku';\nexport default {\n  data() {\n    return {\n      cells: Array.from({ length: 81 }, () => ({ value: 0, fixed: false })),\n      difficulty: 'easy', // 默认难度\n      timer: null,\n      elapsedTime: 0,\n      hintsUsed: 0, // 用于跟踪提示次数\n      historyRecords: [], // 历史记录数组\n    };\n  },\n  created() {\n    this.generateSudoku();\n  },\n  methods: {\n    generateSudoku() {\n      let puzzle, solution;\n      do {\n        puzzle = sudoku.makepuzzle();\n        solution = sudoku.solvepuzzle(puzzle);\n      } while (!solution);\n\n      this.cells = puzzle.map((value, index) => ({\n        value: value === null ? 0 : value + 1,\n        fixed: value !== null,\n      }));\n      this.solution = solution.map(value => value + 1);\n      this.resetTimer();\n      this.startTimer();\n    },\n    resetGame() {\n      this.cells.forEach((cell) => {\n        if (!cell.fixed) {\n          cell.value = 0;\n        }\n      });\n      this.resetTimer();\n    },\n    startTimer() {\n      if (this.timer) {\n        clearInterval(this.timer); // 确保之前的计时器被清除\n      }\n      this.timer = setInterval(() => {\n        this.elapsedTime++;\n      }, 1000);\n    },\n    resetTimer() {\n      if (this.timer) {\n        clearInterval(this.timer);\n        this.timer = null;\n      }\n      this.elapsedTime = 0;\n    },\n    checkSolution() {\n      const validGroup = (group) => {\n        const seen = new Set();\n        for (let i = 0; i < 9; i++) {\n          const num = group[i].value;\n          if (num < 1 || num > 9 || seen.has(num)) return false;\n          seen.add(num);\n        }\n        return true;\n      };\n\n      // 检查行、列和小方块\n      for (let i = 0; i < 9; i++) {\n        const row = this.cells.slice(i * 9, i * 9 + 9);\n        const col = this.cells.filter((_, index) => index % 9 === i);\n        const box = this.cells.filter(\n            (_, index) =>\n                Math.floor(index / 27) === Math.floor(i / 3) &&\n                Math.floor((index % 9) / 3) === i % 3\n        );\n        if (!validGroup(row) || !validGroup(col) || !validGroup(box)) {\n          this.$message.error(\"解答错误，请再试一次！\");\n          return;\n        }\n      }\n\n      // 如果解答正确，停止计时器并计算得分\n      clearInterval(this.timer);\n      const date = new Date().toLocaleDateString();\n      const baseScore = 1000;\n      const timePenalty = this.elapsedTime * 2; // 用时惩罚因子\n      const hintPenalty = this.hintsUsed * 50; // 提示次数惩罚因子\n      const score = Math.max(baseScore - timePenalty - hintPenalty, 0); // 确保分数不为负\n\n      // 更新历史记录\n      this.historyRecords.push({\n        date: date,\n        difficulty: this.difficulty === 'easy' ? '简单' : this.difficulty === 'medium' ? '中等' : '困难',\n        time: this.elapsedTime,\n        hints: this.hintsUsed,\n        score: score,\n        result: '成功',\n      });\n\n      this.$message.success(`恭喜你！解答正确！用时：${this.elapsedTime} 秒，得分：${score}`);\n    },\n    provideHint() {\n      // 示例提示逻辑：找到一个空的可填入的正确值的位置\n      const emptyCells = this.cells\n          .map((cell, index) => ({ cell, index }))\n          .filter(({ cell }) => !cell.fixed && cell.value === 0);\n      if (emptyCells.length > 0) {\n        const randomEmpty = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        const correctValue = this.solution[randomEmpty.index];\n        this.cells[randomEmpty.index].value = correctValue;\n        this.hintsUsed++;\n      } else {\n        this.$message.warning(\"没有可以提示的位置！\");\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.sudoku-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  background-color: #fff6f3;\n}\n\n.header, .left-panel, .right-panel, .footer {\n  background-color: #fff;\n  border: 1px solid #dcdcdc;\n  padding: 20px;\n  margin: 10px;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.main-content {\n  display: flex;\n  width: 100%;\n  justify-content: space-around;\n}\n\n.left-panel, .right-panel {\n  flex: 1;\n  background-color: #f7ebe4\n}\n\n.right-panel{\n  background-color: #fbf5f2;\n}\n\n.sudoku-card {\n  width: 100%;\n}\n\n.profile-section {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.timer {\n  font-size: 1.2em;\n  font-weight: bold;\n}\n\n.game-area {\n  margin-top: 20px;\n}\n\n.sudoku-grid {\n  display: grid;\n  grid-template-columns: repeat(9, 1fr);\n  gap: 5px;\n}\n\n.sudoku-cell {\n  width: 40px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.sudoku-cell input {\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  font-size: 1.2em;\n}\n\n.sudoku-cell.fixed input {\n  background-color: #e0e0e0;\n}\n\n.button-section {\n  margin-top: 20px;\n}\n\n.button-group {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.history {\n  font-size: 1em;\n  font-weight: bold;\n  text-align: center;\n}\n\n.history-table th, .history-table td {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: center;\n}\n\n.history-table th {\n  background-color: #f2f2f2;\n}\n\n.history-table tr:nth-child(even) {\n  background-color: #f9f9f9;\n}\n\n.history-table tr:hover {\n  background-color: #ddd;\n}\n\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}