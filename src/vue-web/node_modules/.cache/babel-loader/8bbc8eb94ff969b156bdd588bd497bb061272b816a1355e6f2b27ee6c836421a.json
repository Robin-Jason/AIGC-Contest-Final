{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from \"axios\";\nexport default {\n  name: 'Chat',\n  data() {\n    return {\n      isChatting: false,\n      mediaRecorder: null,\n      audioChunks: []\n    };\n  },\n  methods: {\n    async toggleChat() {\n      this.isChatting = !this.isChatting;\n      if (this.isChatting) {\n        this.startRecording();\n      } else {\n        this.stopRecording();\n      }\n    },\n    async startRecording() {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        this.mediaRecorder = new MediaRecorder(stream);\n        this.mediaRecorder.ondataavailable = event => {\n          this.audioChunks.push(event.data);\n        };\n        this.mediaRecorder.onstop = this.sendAudioData;\n        this.mediaRecorder.start();\n      } catch (error) {\n        console.error('Error accessing the microphone:', error);\n        alert('无法访问麦克风，请检查权限设置。');\n      }\n    },\n    stopRecording() {\n      if (this.mediaRecorder) {\n        this.mediaRecorder.stop();\n      }\n    },\n    async sendAudioData() {\n      const audioBlob = new Blob(this.audioChunks, {\n        type: 'audio/wav'\n      });\n      const formData = new FormData();\n      formData.append('file', audioBlob);\n      formData.append('model', 'whisper-1');\n      const maxRetries = 5; // 最大重试次数\n      let retryCount = 0; // 当前重试次数\n      let success = false;\n      while (retryCount < maxRetries && !success) {\n        try {\n          // 语音识别\n          const recognitionResponse = await axios.post('https://api.openai.com/v1/audio/transcriptions', formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data',\n              'Authorization': `Bearer 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` // 替换为您的 OpenAI API 密钥\n            }\n          });\n          const recognizedText = recognitionResponse.data.text;\n\n          // 获取 ChatGPT 回复\n          const chatResponse = await axios.post('https://api.openai.com/v1/completions', {\n            model: 'text-davinci-003',\n            prompt: recognizedText,\n            max_tokens: 150\n          }, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer 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` // 替换为您的 OpenAI API 密钥\n            }\n          });\n          const chatText = chatResponse.data.choices[0].text.trim();\n\n          // TTS 转换\n          const synthesisResponse = await axios.post('https://api.openai.com/v1/tts/completions', {\n            text: chatText,\n            voice: 'zh-CN'\n          }, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer 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` // 替换为您的 OpenAI API 密钥\n            }\n          });\n          const audioContent = synthesisResponse.data.audioContent;\n          const audioBlob = new Blob([audioContent], {\n            type: 'audio/mp3'\n          });\n          const audioUrl = URL.createObjectURL(audioBlob);\n          const audio = new Audio(audioUrl);\n          audio.play();\n          success = true; // 请求成功，退出循环\n        } catch (error) {\n          console.error('Error calling OpenAI API:', error);\n          if (error.response && error.response.status === 429) {\n            // 如果是 429 错误，等待一段时间再重试\n            const retryAfter = error.response.headers['retry-after'] || 1;\n            console.log(`429 Too Many Requests, retrying after ${retryAfter} seconds...`);\n            await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));\n          } else {\n            // 非 429 错误，抛出错误\n            throw error;\n          }\n          retryCount++;\n        }\n      }\n      if (!success) {\n        console.error('Failed to call OpenAI API after multiple retries.');\n      } else {\n        this.audioChunks = [];\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","isChatting","mediaRecorder","audioChunks","methods","toggleChat","startRecording","stopRecording","stream","navigator","mediaDevices","getUserMedia","audio","MediaRecorder","ondataavailable","event","push","onstop","sendAudioData","start","error","console","alert","stop","audioBlob","Blob","type","formData","FormData","append","maxRetries","retryCount","success","recognitionResponse","post","headers","recognizedText","text","chatResponse","model","prompt","max_tokens","chatText","choices","trim","synthesisResponse","voice","audioContent","audioUrl","URL","createObjectURL","Audio","play","response","status","retryAfter","log","Promise","resolve","setTimeout"],"sources":["src/views/AI chat/Chat.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <HeaderComponent />\n    <main class=\"main-content\">\n      <div class=\"video-chat\">\n        <img src=\"@/assets/AIChat/video-chat.png\" alt=\"Video Chat\" class=\"video-image\" />\n        <div class=\"video-overlay\">\n          <p class=\"overlay-text\" v-if=\"!isChatting\">点击通话按钮与蓝心小v聊天</p>\n          <p class=\"overlay-text\" v-if=\"isChatting\">李奶奶您正在与蓝心小v进行聊天</p>\n          <p class=\"status-text\" v-show=\"isChatting\">正在通话中......</p>\n          <div class=\"call-buttons\">\n            <button\n                class=\"call-button\"\n                :class=\"isChatting ? 'red' : 'green'\"\n                @click=\"toggleChat\"\n            ></button>\n          </div>\n        </div>\n      </div>\n    </main>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  name: 'Chat',\n\n  data() {\n    return {\n      isChatting: false,\n      mediaRecorder: null,\n      audioChunks: [],\n    };\n  },\n  methods: {\n    async toggleChat() {\n      this.isChatting = !this.isChatting;\n      if (this.isChatting) {\n        this.startRecording();\n      } else {\n        this.stopRecording();\n      }\n    },\n    async startRecording() {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({audio: true});\n        this.mediaRecorder = new MediaRecorder(stream);\n\n        this.mediaRecorder.ondataavailable = (event) => {\n          this.audioChunks.push(event.data);\n        };\n\n        this.mediaRecorder.onstop = this.sendAudioData;\n\n        this.mediaRecorder.start();\n      } catch (error) {\n        console.error('Error accessing the microphone:', error);\n        alert('无法访问麦克风，请检查权限设置。');\n      }\n    },\n    stopRecording() {\n      if (this.mediaRecorder) {\n        this.mediaRecorder.stop();\n      }\n    },\n    async sendAudioData() {\n      const audioBlob = new Blob(this.audioChunks, {type: 'audio/wav'});\n      const formData = new FormData();\n      formData.append('file', audioBlob);\n      formData.append('model', 'whisper-1');\n\n      const maxRetries = 5; // 最大重试次数\n      let retryCount = 0;   // 当前重试次数\n      let success = false;\n\n      while (retryCount < maxRetries && !success) {\n        try {\n          // 语音识别\n          const recognitionResponse = await axios.post('https://api.openai.com/v1/audio/transcriptions', formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data',\n              'Authorization': `Bearer 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`  // 替换为您的 OpenAI API 密钥\n            },\n          });\n\n          const recognizedText = recognitionResponse.data.text;\n\n          // 获取 ChatGPT 回复\n          const chatResponse = await axios.post('https://api.openai.com/v1/completions', {\n            model: 'text-davinci-003',\n            prompt: recognizedText,\n            max_tokens: 150,\n          }, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer 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`  // 替换为您的 OpenAI API 密钥\n            },\n          });\n\n          const chatText = chatResponse.data.choices[0].text.trim();\n\n          // TTS 转换\n          const synthesisResponse = await axios.post('https://api.openai.com/v1/tts/completions', {\n            text: chatText,\n            voice: 'zh-CN',\n          }, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer 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`  // 替换为您的 OpenAI API 密钥\n            },\n          });\n\n          const audioContent = synthesisResponse.data.audioContent;\n          const audioBlob = new Blob([audioContent], {type: 'audio/mp3'});\n          const audioUrl = URL.createObjectURL(audioBlob);\n          const audio = new Audio(audioUrl);\n          audio.play();\n\n          success = true;  // 请求成功，退出循环\n        } catch (error) {\n          console.error('Error calling OpenAI API:', error);\n\n          if (error.response && error.response.status === 429) {\n            // 如果是 429 错误，等待一段时间再重试\n            const retryAfter = error.response.headers['retry-after'] || 1;\n            console.log(`429 Too Many Requests, retrying after ${retryAfter} seconds...`);\n            await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));\n          } else {\n            // 非 429 错误，抛出错误\n            throw error;\n          }\n\n          retryCount++;\n        }\n      }\n\n      if (!success) {\n        console.error('Failed to call OpenAI API after multiple retries.');\n      } else {\n        this.audioChunks = [];\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n#app {\n  width: 100%;\n  height: 100%;\n  margin: 0 auto;\n  background-color: #ffe9e9;\n}\n\n.main-content {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: calc(100% - 160px);\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.video-chat {\n  position: relative;\n  width: 1184px;\n  height: 666px;\n  border-radius: 20px;\n  overflow: hidden;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.video-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.video-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: rgba(0, 0, 0, 0.2);\n}\n\n.overlay-text {\n  margin: 0;\n  padding: 10px 20px;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  border-radius: 10px;\n}\n\n.status-text {\n  margin: 20px 0;\n  padding: 10px 20px;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  border-radius: 10px;\n}\n\n.call-buttons {\n  display: flex;\n  margin-top: 20px;\n}\n\n.call-button {\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  border: none;\n  cursor: pointer;\n  background-size: cover;\n}\n\n.call-button.green {\n  background-image: url('@/assets/AIChat/call.png');\n}\n\n.call-button.red {\n  background-image: url('@/assets/AIChat/hangUp.png');\n}\n</style>"],"mappings":";;;;AAwBA,OAAAA,KAAA;AAEA;EACAC,IAAA;EAEAC,KAAA;IACA;MACAC,UAAA;MACAC,aAAA;MACAC,WAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,WAAA;MACA,KAAAJ,UAAA,SAAAA,UAAA;MACA,SAAAA,UAAA;QACA,KAAAK,cAAA;MACA;QACA,KAAAC,aAAA;MACA;IACA;IACA,MAAAD,eAAA;MACA;QACA,MAAAE,MAAA,SAAAC,SAAA,CAAAC,YAAA,CAAAC,YAAA;UAAAC,KAAA;QAAA;QACA,KAAAV,aAAA,OAAAW,aAAA,CAAAL,MAAA;QAEA,KAAAN,aAAA,CAAAY,eAAA,GAAAC,KAAA;UACA,KAAAZ,WAAA,CAAAa,IAAA,CAAAD,KAAA,CAAAf,IAAA;QACA;QAEA,KAAAE,aAAA,CAAAe,MAAA,QAAAC,aAAA;QAEA,KAAAhB,aAAA,CAAAiB,KAAA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,oCAAAA,KAAA;QACAE,KAAA;MACA;IACA;IACAf,cAAA;MACA,SAAAL,aAAA;QACA,KAAAA,aAAA,CAAAqB,IAAA;MACA;IACA;IACA,MAAAL,cAAA;MACA,MAAAM,SAAA,OAAAC,IAAA,MAAAtB,WAAA;QAAAuB,IAAA;MAAA;MACA,MAAAC,QAAA,OAAAC,QAAA;MACAD,QAAA,CAAAE,MAAA,SAAAL,SAAA;MACAG,QAAA,CAAAE,MAAA;MAEA,MAAAC,UAAA;MACA,IAAAC,UAAA;MACA,IAAAC,OAAA;MAEA,OAAAD,UAAA,GAAAD,UAAA,KAAAE,OAAA;QACA;UACA;UACA,MAAAC,mBAAA,SAAAnC,KAAA,CAAAoC,IAAA,mDAAAP,QAAA;YACAQ,OAAA;cACA;cACA;YACA;UACA;UAEA,MAAAC,cAAA,GAAAH,mBAAA,CAAAjC,IAAA,CAAAqC,IAAA;;UAEA;UACA,MAAAC,YAAA,SAAAxC,KAAA,CAAAoC,IAAA;YACAK,KAAA;YACAC,MAAA,EAAAJ,cAAA;YACAK,UAAA;UACA;YACAN,OAAA;cACA;cACA;YACA;UACA;UAEA,MAAAO,QAAA,GAAAJ,YAAA,CAAAtC,IAAA,CAAA2C,OAAA,IAAAN,IAAA,CAAAO,IAAA;;UAEA;UACA,MAAAC,iBAAA,SAAA/C,KAAA,CAAAoC,IAAA;YACAG,IAAA,EAAAK,QAAA;YACAI,KAAA;UACA;YACAX,OAAA;cACA;cACA;YACA;UACA;UAEA,MAAAY,YAAA,GAAAF,iBAAA,CAAA7C,IAAA,CAAA+C,YAAA;UACA,MAAAvB,SAAA,OAAAC,IAAA,EAAAsB,YAAA;YAAArB,IAAA;UAAA;UACA,MAAAsB,QAAA,GAAAC,GAAA,CAAAC,eAAA,CAAA1B,SAAA;UACA,MAAAZ,KAAA,OAAAuC,KAAA,CAAAH,QAAA;UACApC,KAAA,CAAAwC,IAAA;UAEApB,OAAA;QACA,SAAAZ,KAAA;UACAC,OAAA,CAAAD,KAAA,8BAAAA,KAAA;UAEA,IAAAA,KAAA,CAAAiC,QAAA,IAAAjC,KAAA,CAAAiC,QAAA,CAAAC,MAAA;YACA;YACA,MAAAC,UAAA,GAAAnC,KAAA,CAAAiC,QAAA,CAAAlB,OAAA;YACAd,OAAA,CAAAmC,GAAA,0CAAAD,UAAA;YACA,UAAAE,OAAA,CAAAC,OAAA,IAAAC,UAAA,CAAAD,OAAA,EAAAH,UAAA;UACA;YACA;YACA,MAAAnC,KAAA;UACA;UAEAW,UAAA;QACA;MACA;MAEA,KAAAC,OAAA;QACAX,OAAA,CAAAD,KAAA;MACA;QACA,KAAAjB,WAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}