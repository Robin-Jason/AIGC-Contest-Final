{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Button, Select } from 'element-ui';\nexport default {\n  name: 'DiscussionPage',\n  components: {\n    elButton: Button,\n    elSelect: Select\n  },\n  data() {\n    return {\n      size: [5, 4],\n      mouseId: null,\n      site: [],\n      count: 0,\n      time: 30,\n      timerId: null,\n      isClick: false,\n      level: null,\n      levelOptions: [{\n        label: '低难度',\n        value: 0\n      }, {\n        label: '中难度',\n        value: 1\n      }, {\n        label: '高难度',\n        value: 2\n      }],\n      speed: 1500,\n      imgList: [require('../../assets/Game/Mouse/3.jpg'), require('../../assets/Game/Mouse/5.jpg')],\n      imgSrc: null,\n      scoreHistory: [],\n      // 用于存储历史分数\n      highestScore: 0 // 历史最高分\n    };\n  },\n  mounted() {\n    const ua = navigator.userAgent;\n    const ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n    const isIphone = !ipad && ua.match(/(iPhone\\sOS)\\s([\\d_]+)/);\n    const isAndroid = ua.match(/(Android)\\s+([\\d.]+)/);\n    const isMobile = isIphone || isAndroid;\n    if (isMobile) {\n      this.size = [3, 3];\n    }\n  },\n  methods: {\n    ready() {\n      if (this.time > 0) {\n        this.imgSrc = this.imgList[0];\n        this.randomSite();\n        this.mouseId = setInterval(this.randomSite, this.speed);\n      }\n    },\n    isShow(x, y) {\n      return this.site[0] === x && this.site[1] === y;\n    },\n    randomSite() {\n      const x = Math.floor(Math.random() * this.size[0] + 1);\n      const y = Math.floor(Math.random() * this.size[1] + 1);\n      this.site = [x, y];\n    },\n    spendTime() {\n      this.timerId = setInterval(() => {\n        this.time--;\n        if (this.time === 0) {\n          this.site = [];\n          clearInterval(this.mouseId);\n          clearInterval(this.timerId);\n          this.isClick = false;\n          this.updateScoreHistory();\n          this.$message({\n            message: '游戏结束',\n            type: 'success',\n            center: true,\n            duration: 1000\n          });\n        }\n      }, 1000);\n    },\n    hitGround(x, y) {\n      if (this.site[0] === x && this.site[1] === y && this.time > 0) {\n        this.count++;\n        this.imgSrc = this.imgList[1];\n        this.$refs.audio.play();\n        clearInterval(this.mouseId);\n        setTimeout(() => {\n          this.site = [];\n        }, 300);\n        setTimeout(() => {\n          this.ready();\n        }, (Math.random() + 1) * 1000);\n      }\n    },\n    startGame() {\n      this.$message({\n        message: '游戏开始',\n        type: 'success',\n        center: true,\n        duration: 1000\n      });\n      this.time = 30;\n      this.count = 0;\n      this.ready();\n      this.spendTime();\n      this.isClick = true;\n    },\n    changelevel(val) {\n      switch (val) {\n        case 0:\n          this.speed = 1500;\n          break;\n        case 1:\n          this.speed = 1000;\n          break;\n        case 2:\n          this.speed = 500;\n          break;\n        default:\n          this.speed = 1500;\n          break;\n      }\n    },\n    updateScoreHistory() {\n      const timestamp = new Date().toLocaleString();\n      const newScore = {\n        time: timestamp,\n        value: this.count\n      };\n      this.scoreHistory.push(newScore);\n      if (this.count > this.highestScore) {\n        this.highestScore = this.count;\n      }\n      this.scoreHistory.sort((a, b) => b.value - a.value);\n    }\n  }\n};","map":{"version":3,"names":["Button","Select","name","components","elButton","elSelect","data","size","mouseId","site","count","time","timerId","isClick","level","levelOptions","label","value","speed","imgList","require","imgSrc","scoreHistory","highestScore","mounted","ua","navigator","userAgent","ipad","match","isIphone","isAndroid","isMobile","methods","ready","randomSite","setInterval","isShow","x","y","Math","floor","random","spendTime","clearInterval","updateScoreHistory","$message","message","type","center","duration","hitGround","$refs","audio","play","setTimeout","startGame","changelevel","val","timestamp","Date","toLocaleString","newScore","push","sort","a","b"],"sources":["src/views/Game/Mouse.vue"],"sourcesContent":["<template>\n  <div id=\"discussion-page\">\n    <div class=\"container\">\n      <div class=\"header-row\">\n        <h2 class=\"discussion-title\">打地鼠小游戏</h2>\n      </div>\n\n      <div class=\"content-container\">\n        <!-- 新增历史分数模块 -->\n        <div class=\"history-score-module\">\n          <h3>历史分数</h3>\n          <p class=\"highest-score\">历史最高成绩为：{{ highestScore }}</p>\n          <ul class=\"score-list\">\n            <li v-for=\"(score, index) in scoreHistory\" :key=\"index\">\n              <span>{{ score.time }}</span> - <span>{{ score.value }} 分</span>\n            </li>\n          </ul>\n        </div>\n\n        <!-- 打地鼠游戏区域 -->\n        <div class=\"content\">\n          <header>\n            <audio src=\"../../assets/Game/Mouse/1.mp3\" ref=\"audio\"></audio>\n            <div>\n              <div>\n                <el-button\n                  type=\"primary\"\n                  size=\"small\"\n                  round\n                  @click=\"startGame\"\n                  :disabled=\"isClick\"\n                  class=\"custom-button\">\n                  开始游戏\n                </el-button>\n\n                <el-select v-model=\"level\" placeholder=\"难度选择\" @change=\"changelevel\">\n                  <el-option v-for=\"item in levelOptions\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\n                  </el-option>\n                </el-select>\n              </div>\n              <div>\n                <span><i class=\"el-icon-s-flag\"></i>分数: {{ count }}</span>\n                <span><i class=\"el-icon-time\"></i>倒计时: {{ time }} S</span>\n              </div>\n            </div>\n          </header>\n          <div class=\"row\" v-for=\"y in size[1]\" :key=\"y\">\n            <!--在老鼠被击中时 不能触发点击事件-->\n            <div class=\"box\" v-for=\"x in size[0]\" :key=\"x\" @click.stop.prevent=\"imgSrc !== imgList[1] && hitGround(x,y)\">\n              <img v-show=\"isShow(x,y)\" :src=\"imgSrc\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Button, Select } from 'element-ui';\n\nexport default {\n  name: 'DiscussionPage',\n  components: {\n    elButton: Button,\n    elSelect: Select,\n  },\n  data() {\n    return {\n      size: [5, 4],\n      mouseId: null,\n      site: [],\n      count: 0,\n      time: 30,\n      timerId: null,\n      isClick: false,\n      level: null,\n      levelOptions: [\n        { label: '低难度', value: 0 },\n        { label: '中难度', value: 1 },\n        { label: '高难度', value: 2 },\n      ],\n      speed: 1500,\n      imgList: [require('../../assets/Game/Mouse/3.jpg'), require('../../assets/Game/Mouse/5.jpg')],\n      imgSrc: null,\n      scoreHistory: [], // 用于存储历史分数\n      highestScore: 0, // 历史最高分\n    };\n  },\n  mounted() {\n    const ua = navigator.userAgent;\n    const ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n    const isIphone = !ipad && ua.match(/(iPhone\\sOS)\\s([\\d_]+)/);\n    const isAndroid = ua.match(/(Android)\\s+([\\d.]+)/);\n    const isMobile = isIphone || isAndroid;\n    if (isMobile) {\n      this.size = [3, 3];\n    }\n  },\n  methods: {\n    ready() {\n      if (this.time > 0) {\n        this.imgSrc = this.imgList[0];\n        this.randomSite();\n        this.mouseId = setInterval(this.randomSite, this.speed);\n      }\n    },\n    isShow(x, y) {\n      return this.site[0] === x && this.site[1] === y;\n    },\n    randomSite() {\n      const x = Math.floor(Math.random() * this.size[0] + 1);\n      const y = Math.floor(Math.random() * this.size[1] + 1);\n      this.site = [x, y];\n    },\n    spendTime() {\n      this.timerId = setInterval(() => {\n        this.time--;\n        if (this.time === 0) {\n          this.site = [];\n          clearInterval(this.mouseId);\n          clearInterval(this.timerId);\n          this.isClick = false;\n          this.updateScoreHistory();\n          this.$message({\n            message: '游戏结束',\n            type: 'success',\n            center: true,\n            duration: 1000,\n          });\n        }\n      }, 1000);\n    },\n    hitGround(x, y) {\n      if (this.site[0] === x && this.site[1] === y && this.time > 0) {\n        this.count++;\n        this.imgSrc = this.imgList[1];\n        this.$refs.audio.play();\n        clearInterval(this.mouseId);\n        setTimeout(() => {\n          this.site = [];\n        }, 300);\n        setTimeout(() => {\n          this.ready();\n        }, (Math.random() + 1) * 1000);\n      }\n    },\n    startGame() {\n      this.$message({\n        message: '游戏开始',\n        type: 'success',\n        center: true,\n        duration: 1000,\n      });\n      this.time = 30;\n      this.count = 0;\n      this.ready();\n      this.spendTime();\n      this.isClick = true;\n    },\n    changelevel(val) {\n      switch (val) {\n        case 0:\n          this.speed = 1500;\n          break;\n        case 1:\n          this.speed = 1000;\n          break;\n        case 2:\n          this.speed = 500;\n          break;\n        default:\n          this.speed = 1500;\n          break;\n      }\n    },\n    updateScoreHistory() {\n      const timestamp = new Date().toLocaleString();\n      const newScore = { time: timestamp, value: this.count };\n      this.scoreHistory.push(newScore);\n\n      if (this.count > this.highestScore) {\n        this.highestScore = this.count;\n      }\n\n      this.scoreHistory.sort((a, b) => b.value - a.value);\n    },\n  },\n};\n</script>\n\n<style scoped>\n#discussion-page {\n  width: 100%;\n  height: 100%;\n  background-color: #ffe9e9;\n  font-family: Arial, sans-serif;\n}\n\n.container {\n  height: 100px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #ffe9e9;\n  padding: 20px;\n}\n\n.header-row {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 1000px;\n  margin-bottom: 20px;\n  position: relative;\n}\n\n.discussion-title {\n  font-size: 24px;\n  font-weight: bold;\n  flex-grow: 1;\n  text-align: center;\n}\n\n.history-score-module {\n  background-color: #ffffff;\n  border-radius: 30px;\n  padding: 20px;\n  box-shadow: 0 4px 8px rgba(221, 37, 37, 0.1);\n  width: 300px;\n  height: 500px;\n  margin-right: 20px;\n}\n\n.history-score-module h3 {\n  font-size: 22px;\n  font-weight: bold;\n  margin-bottom: 10px;\n  text-align: center;\n}\n\n.highest-score {\n  font-size: 18px;\n  color: #e74c3c;\n  margin-bottom: 15px;\n  text-align: center;\n}\n\n.score-list {\n  list-style-type: none;\n  padding: 0;\n  max-height: 250px;\n  overflow-y: auto;\n}\n\n.score-list li {\n  font-size: 16px;\n  margin-bottom: 10px;\n  text-align: left;\n  color: #333;\n}\n\n.content-container {\n  display: flex;\n}\n\n.custom-button {\n  background-color: #eecacb !important;\n  color: #120101 !important;\n  border: none !important;\n  box-shadow: none !important;\n}\n\n.content {\n  height: 400px;\n  width: 450px;\n  margin-left: 10%;\n}\n\nheader {\n  width: 280px;\n  margin-bottom: 40px;\n  padding-left: 5px;\n}\n\nheader > div div {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 5px;\n}\n\n.el-input__inner {\n  width: 150px !important;\n  height: 35px !important;\n  line-height: 35px !important;\n}\n\n.row {\n  display: flex;\n}\n\n.box {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 80px;\n  height: 80px;\n  cursor: url('../../assets/Game/Mouse/4.jpg'), auto;\n  border: 5px solid #f9d67f;\n  border-radius: 10px;\n  background-image: url('../../assets/Game/Mouse/2.jpg');\n}\n\n.box img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}