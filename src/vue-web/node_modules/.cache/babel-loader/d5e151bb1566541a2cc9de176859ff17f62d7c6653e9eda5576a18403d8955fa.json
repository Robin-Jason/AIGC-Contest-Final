{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      grid: Array.from({\n        length: 9\n      }, () => Array(9).fill('')),\n      fixedCells: [],\n      steps: [],\n      currentStep: 0,\n      explanation: '',\n      audioUrl: ''\n    };\n  },\n  methods: {\n    // 生成随机数独题目\n    async generatePuzzle() {\n      try {\n        const response = await axios.get('/api/sudoku/generate');\n        this.grid = response.data.grid;\n        this.fixedCells = response.data.fixedCells;\n        this.steps = [];\n        this.currentStep = 0;\n        this.explanation = '';\n        this.audioUrl = '';\n      } catch (error) {\n        console.error('生成数独题目时出错:', error);\n      }\n    },\n    // 更新数独网格\n    updateGrid(row, col, value) {\n      if (/^[1-9]$/.test(value)) {\n        this.grid[row][col] = value;\n        this.saveStep(row, col, value);\n      }\n    },\n    // 保存每一步的操作\n    async saveStep(row, col, value) {\n      this.steps.push({\n        row,\n        col,\n        value\n      });\n      try {\n        await axios.post('/api/sudoku/saveStep', {\n          row,\n          col,\n          value\n        });\n        await this.explainMove(row, col, value);\n      } catch (error) {\n        console.error('保存步骤时出错:', error);\n      }\n    },\n    // 调用蓝心大模型解释\n    async explainMove(row, col, value) {\n      try {\n        const response = await axios.post('/api/sudoku/explain', {\n          grid: this.grid,\n          row,\n          col,\n          value\n        });\n        this.explanation = response.data.explanation;\n        this.audioUrl = response.data.audioUrl;\n      } catch (error) {\n        console.error('解释数独步骤时出错:', error);\n      }\n    },\n    // 自动解题逻辑\n    async solveSudoku() {\n      while (!this.isSolved()) {\n        const nextMove = this.getNextMove();\n        if (!nextMove) break;\n        const {\n          row,\n          col,\n          value\n        } = nextMove;\n        this.grid[row][col] = value;\n        await this.explainMove(row, col, value);\n        await this.sleep(2000);\n      }\n    },\n    // 重放功能\n    async replaySteps() {\n      this.currentStep = 0;\n      for (const step of this.steps) {\n        this.grid[step.row][step.col] = step.value;\n        this.explanation = step.explanation;\n        this.audioUrl = step.audioUrl;\n        await this.sleep(2000);\n      }\n    },\n    sleep(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    },\n    // 判断数独是否完成\n    isSolved() {\n      // 检查数独解答完成的逻辑\n    },\n    // 获取下一个解答步骤\n    getNextMove() {\n      // 寻找下一个解答步骤的逻辑\n    },\n    // 判断单元格是否是固定的\n    isCellFixed(row, col) {\n      return this.fixedCells.some(cell => cell.row === row && cell.col === col);\n    },\n    // 手动输入题目\n    inputPuzzle() {\n      this.grid = Array.from({\n        length: 9\n      }, () => Array(9).fill(''));\n      this.fixedCells = [];\n      this.steps = [];\n    }\n  }\n};","map":{"version":3,"names":["axios","data","grid","Array","from","length","fill","fixedCells","steps","currentStep","explanation","audioUrl","methods","generatePuzzle","response","get","error","console","updateGrid","row","col","value","test","saveStep","push","post","explainMove","solveSudoku","isSolved","nextMove","getNextMove","sleep","replaySteps","step","ms","Promise","resolve","setTimeout","isCellFixed","some","cell","inputPuzzle"],"sources":["src/views/Game/Sudoku.vue"],"sourcesContent":["<template>\n  <div class=\"main-content\">\n    <!-- Sudoku Card Section -->\n    <div class=\"sudoku-card card\">\n      <h2>数独游戏</h2>\n      <div class=\"game-area\">\n        <div class=\"sudoku-grid\">\n          <div v-for=\"(row, rowIndex) in grid\" :key=\"rowIndex\" class=\"sudoku-row\">\n            <div v-for=\"(cell, colIndex) in row\" :key=\"colIndex\" class=\"sudoku-cell\" :class=\"{ fixed: isCellFixed(rowIndex, colIndex) }\">\n              <input\n                  type=\"text\"\n                  maxlength=\"1\"\n                  :value=\"cell\"\n                  @input=\"updateGrid(rowIndex, colIndex, $event.target.value)\"\n                  :disabled=\"isCellFixed(rowIndex, colIndex)\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"button-section\">\n        <div class=\"button-group\">\n          <button @click=\"generatePuzzle\" class=\"action-button\">出题</button>\n          <button @click=\"solveSudoku\" class=\"action-button\">解题</button>\n          <button @click=\"replaySteps\" class=\"action-button\">重放</button>\n          <button @click=\"inputPuzzle\" class=\"action-button\">手动录入题目</button>\n        </div>\n      </div>\n      <div v-if=\"explanation\" class=\"explanation-section\">\n        <p>{{ explanation }}</p>\n        <audio v-if=\"audioUrl\" :src=\"audioUrl\" controls autoplay></audio>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      grid: Array.from({ length: 9 }, () => Array(9).fill('')),\n      fixedCells: [],\n      steps: [],\n      currentStep: 0,\n      explanation: '',\n      audioUrl: '',\n    };\n  },\n  methods: {\n    // 生成随机数独题目\n    async generatePuzzle() {\n      try {\n        const response = await axios.get('/api/sudoku/generate');\n        this.grid = response.data.grid;\n        this.fixedCells = response.data.fixedCells;\n        this.steps = [];\n        this.currentStep = 0;\n        this.explanation = '';\n        this.audioUrl = '';\n      } catch (error) {\n        console.error('生成数独题目时出错:', error);\n      }\n    },\n    // 更新数独网格\n    updateGrid(row, col, value) {\n      if (/^[1-9]$/.test(value)) {\n        this.grid[row][col] = value;\n        this.saveStep(row, col, value);\n      }\n    },\n    // 保存每一步的操作\n    async saveStep(row, col, value) {\n      this.steps.push({ row, col, value });\n      try {\n        await axios.post('/api/sudoku/saveStep', { row, col, value });\n        await this.explainMove(row, col, value);\n      } catch (error) {\n        console.error('保存步骤时出错:', error);\n      }\n    },\n    // 调用蓝心大模型解释\n    async explainMove(row, col, value) {\n      try {\n        const response = await axios.post('/api/sudoku/explain', {\n          grid: this.grid,\n          row,\n          col,\n          value,\n        });\n        this.explanation = response.data.explanation;\n        this.audioUrl = response.data.audioUrl;\n      } catch (error) {\n        console.error('解释数独步骤时出错:', error);\n      }\n    },\n    // 自动解题逻辑\n    async solveSudoku() {\n      while (!this.isSolved()) {\n        const nextMove = this.getNextMove();\n        if (!nextMove) break;\n        const { row, col, value } = nextMove;\n        this.grid[row][col] = value;\n        await this.explainMove(row, col, value);\n        await this.sleep(2000);\n      }\n    },\n    // 重放功能\n    async replaySteps() {\n      this.currentStep = 0;\n      for (const step of this.steps) {\n        this.grid[step.row][step.col] = step.value;\n        this.explanation = step.explanation;\n        this.audioUrl = step.audioUrl;\n        await this.sleep(2000);\n      }\n    },\n    sleep(ms) {\n      return new Promise((resolve) => setTimeout(resolve, ms));\n    },\n    // 判断数独是否完成\n    isSolved() {\n      // 检查数独解答完成的逻辑\n    },\n    // 获取下一个解答步骤\n    getNextMove() {\n      // 寻找下一个解答步骤的逻辑\n    },\n    // 判断单元格是否是固定的\n    isCellFixed(row, col) {\n      return this.fixedCells.some(\n          (cell) => cell.row === row && cell.col === col\n      );\n    },\n    // 手动输入题目\n    inputPuzzle() {\n      this.grid = Array.from({ length: 9 }, () => Array(9).fill(''));\n      this.fixedCells = [];\n      this.steps = [];\n    },\n  },\n};\n</script>\n\n<style scoped>\n.main-content {\n  display: grid;\n  grid-template-columns: 0.6fr 0.6fr 0.8fr;\n  gap: 20px;\n  padding: 100px;\n  padding-top: 50px;\n  background-color: #fef6f0;\n}\n\n.card {\n  background-color: #ffffff;\n  border-radius: 15px;\n  padding: 20px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n.sudoku-grid {\n  display: grid;\n  grid-template-columns: repeat(9, 40px);\n  gap: 2px;\n}\n\n.sudoku-cell {\n  border: 1px solid #ddd;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.sudoku-cell input {\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  font-size: 16px;\n}\n\n.sudoku-cell.fixed input {\n  background-color: #e0e0e0;\n}\n\n.button-section {\n  margin-top: 20px;\n}\n\n.button-group {\n  display: flex;\n  gap: 10px;\n}\n\n.action-button {\n  padding: 10px 20px;\n  background-color: #f3d59f;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.action-button:hover {\n  background-color: #e3c489;\n}\n\n.explanation-section {\n  margin-top: 20px;\n  background-color: #fbf5f2;\n  padding: 10px;\n  border-radius: 8px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}