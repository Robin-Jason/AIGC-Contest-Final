{"ast":null,"code":"import \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport { sendMessageToGpt } from '@/api/chatWithGpt.js';\nimport { v4 as uuidv4 } from 'uuid';\nexport default {\n  data() {\n    return {\n      themes: '',\n      poem: null,\n      userInputArray: [],\n      evaluation: '',\n      isLoading: false,\n      currentStage: 1,\n      // 当前阶段，1：选择主题，2：填写诗词，3：创作点评\n      sessionId: uuidv4()\n    };\n  },\n  computed: {\n    themesArray() {\n      return this.themes.split(' ');\n    },\n    poemLines() {\n      if (!this.poem) return [];\n      return this.poem.replace(/[\\u3000\\s]+(?=[。，；！？：、“”‘’《》【】（）—])/g, '') // 移除标点符号后的无意义空格\n      .split(/(?<=[。，；！？：、“”‘’《》【】（）—])/);\n    }\n  },\n  watch: {\n    poemLines(newLines) {\n      this.userInputArray = newLines.map(line => line.split('').map(char => char === '*' ? '' : null));\n    }\n  },\n  mounted() {\n    this.getThemes();\n  },\n  methods: {\n    async getThemes() {\n      this.isLoading = true;\n      try {\n        const response = await sendMessageToGpt('提供一些中文诗的给我选择主题，仅回复主题，主题间以空格隔开', this.sessionId);\n        this.themes = response.data.content.trim();\n        this.isLoading = false;\n      } catch (error) {\n        console.error('获取主题失败:', error);\n        this.isLoading = false;\n      }\n    },\n    async selectTheme(theme) {\n      this.isLoading = true;\n      try {\n        const response = await sendMessageToGpt(`写一首主题为${theme}的诗词，仅回复诗词内容`, this.sessionId);\n        const fullPoem = response.data.content.trim();\n        console.log('获取的完整诗句:', fullPoem);\n        const cleanedPoem = fullPoem.replace(/\\r?\\n|\\r/g, '') // 移除换行符\n        .replace(/[\\u3000\\s]+(?=[。，；！？：、“”‘’《》【】（）—])/g, ''); // 移除标点符号后的无意义空格\n\n        // 将诗句转换为字符数组\n        const poemArray = cleanedPoem.split('');\n\n        // 计算需要挖空的字符数量\n        const numberOfBlanks = Math.min(10, Math.floor(poemArray.length * 0.2)); // 至少挖空10个字符或20%字符\n\n        // 使用 Set 确保挖空位置不重复\n        const blankIndexes = new Set();\n        while (blankIndexes.size < numberOfBlanks) {\n          const randomIndex = Math.floor(Math.random() * poemArray.length);\n          if (poemArray[randomIndex] !== '*' && !/[\\u3000\\s。，；！？：、“”‘’《》【】（）—]/.test(poemArray[randomIndex])) {\n            blankIndexes.add(randomIndex);\n          }\n        }\n\n        // 挖空字符并用 '*' 替代\n        blankIndexes.forEach(index => {\n          poemArray[index] = '*';\n        });\n\n        // 重新组合挖空后的诗句\n        this.poem = poemArray.join('');\n        this.currentStage = 2;\n        this.isLoading = false;\n      } catch (error) {\n        console.error('获取诗词失败:', error);\n        this.isLoading = false;\n      }\n    },\n    async evaluatePoem() {\n      this.isLoading = true;\n      const userFilledPoem = this.poemLines.map((line, index) => line.split('').map((char, charIndex) => char === '*' ? this.userInputArray[index][charIndex] : char).join('')).join('');\n      try {\n        const response = await sendMessageToGpt(`评价提交的诗词: ${userFilledPoem}，并给出你的修改意见和原诗`, this.sessionId);\n        this.evaluation = response.data.content;\n        this.currentStage = 3;\n        this.isLoading = false;\n      } catch (error) {\n        console.error('评价诗词失败:', error);\n        this.isLoading = false;\n      }\n    },\n    restart() {\n      this.currentStage = 1;\n      this.poem = null;\n      this.userInputArray = [];\n      this.evaluation = '';\n    }\n  }\n};","map":{"version":3,"names":["sendMessageToGpt","v4","uuidv4","data","themes","poem","userInputArray","evaluation","isLoading","currentStage","sessionId","computed","themesArray","split","poemLines","replace","watch","newLines","map","line","char","mounted","getThemes","methods","response","content","trim","error","console","selectTheme","theme","fullPoem","log","cleanedPoem","poemArray","numberOfBlanks","Math","min","floor","length","blankIndexes","Set","size","randomIndex","random","test","add","forEach","index","join","evaluatePoem","userFilledPoem","charIndex","restart"],"sources":["src/views/Game/Poem.vue"],"sourcesContent":["<template>\n  <div class=\"poem-container\">\n    <!-- 第一阶段：选择主题 -->\n    <div v-if=\"currentStage === 1\" class=\"stage\">\n      <h2 class=\"stage-title\">请选择想创作的诗词主题</h2>\n      <div class=\"theme-buttons\">\n        <button\n            v-for=\"(theme, index) in themesArray\"\n            :key=\"index\"\n            class=\"theme-button\"\n            @click=\"selectTheme(theme)\"\n        >\n          {{ theme }}\n        </button>\n      </div>\n    </div>\n\n    <!-- 第二阶段：填写诗词 -->\n    <div v-if=\"currentStage === 2\" class=\"stage\">\n      <h2 class=\"stage-title\">请补全诗词创作</h2>\n      <div class=\"poem-grid\">\n        <div v-for=\"(line, index) in poemLines\" :key=\"index\" class=\"poem-line\">\n          <span\n              v-for=\"(char, charIndex) in line\"\n              :key=\"charIndex\"\n              class=\"poem-char\"\n          >\n            <template v-if=\"char === '*'\">\n              <input\n                  v-model=\"userInputArray[index][charIndex]\"\n                  type=\"text\"\n                  maxlength=\"1\"\n                  class=\"poem-input\"\n              />\n            </template>\n            <template v-else>\n              {{ char }}\n            </template>\n          </span>\n        </div>\n      </div>\n      <button @click=\"evaluatePoem\" class=\"evaluate-button\">提交</button>\n    </div>\n\n    <!-- 第三阶段：创作点评 -->\n    <div v-if=\"currentStage === 3\" class=\"stage\">\n      <h2 class=\"stage-title\">创作点评</h2>\n      <p class=\"evaluation\">{{ evaluation }}</p>\n      <button @click=\"restart\" class=\"restart-button\">再写一首</button>\n    </div>\n\n    <!-- 加载状态 -->\n    <div v-if=\"isLoading\" class=\"loading-overlay\">\n      <div class=\"loading-spinner\"></div>\n      <p class=\"loading-text\">内容生成中...</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { sendMessageToGpt } from '@/api/chatWithGpt.js';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default {\n  data() {\n    return {\n      themes: '',\n      poem: null,\n      userInputArray: [],\n      evaluation: '',\n      isLoading: false,\n      currentStage: 1, // 当前阶段，1：选择主题，2：填写诗词，3：创作点评\n      sessionId: uuidv4(),\n    };\n  },\n  computed: {\n    themesArray() {\n      return this.themes.split(' ');\n    },\n    poemLines() {\n      if (!this.poem) return [];\n      return this.poem\n          .replace(/[\\u3000\\s]+(?=[。，；！？：、“”‘’《》【】（）—])/g, '') // 移除标点符号后的无意义空格\n          .split(/(?<=[。，；！？：、“”‘’《》【】（）—])/);\n    },\n  },\n  watch: {\n    poemLines(newLines) {\n      this.userInputArray = newLines.map(line =>\n          line.split('').map(char => (char === '*' ? '' : null))\n      );\n    },\n  },\n  mounted() {\n    this.getThemes();\n  },\n  methods: {\n    async getThemes() {\n      this.isLoading = true;\n      try {\n        const response = await sendMessageToGpt('提供一些中文诗的给我选择主题，仅回复主题，主题间以空格隔开', this.sessionId);\n        this.themes = response.data.content.trim();\n        this.isLoading = false;\n      } catch (error) {\n        console.error('获取主题失败:', error);\n        this.isLoading = false;\n      }\n    },\n    async selectTheme(theme) {\n      this.isLoading = true;\n      try {\n        const response = await sendMessageToGpt(`写一首主题为${theme}的诗词，仅回复诗词内容`, this.sessionId);\n        const fullPoem = response.data.content.trim();\n        console.log('获取的完整诗句:', fullPoem);\n\n        const cleanedPoem = fullPoem\n            .replace(/\\r?\\n|\\r/g, '')  // 移除换行符\n            .replace(/[\\u3000\\s]+(?=[。，；！？：、“”‘’《》【】（）—])/g, ''); // 移除标点符号后的无意义空格\n\n        // 将诗句转换为字符数组\n        const poemArray = cleanedPoem.split('');\n\n        // 计算需要挖空的字符数量\n        const numberOfBlanks = Math.min(10, Math.floor(poemArray.length * 0.2)); // 至少挖空10个字符或20%字符\n\n        // 使用 Set 确保挖空位置不重复\n        const blankIndexes = new Set();\n\n        while (blankIndexes.size < numberOfBlanks) {\n          const randomIndex = Math.floor(Math.random() * poemArray.length);\n          if (poemArray[randomIndex] !== '*' && !/[\\u3000\\s。，；！？：、“”‘’《》【】（）—]/.test(poemArray[randomIndex])) {\n            blankIndexes.add(randomIndex);\n          }\n        }\n\n        // 挖空字符并用 '*' 替代\n        blankIndexes.forEach(index => {\n          poemArray[index] = '*';\n        });\n\n        // 重新组合挖空后的诗句\n        this.poem = poemArray.join('');\n        this.currentStage = 2;\n        this.isLoading = false;\n      } catch (error) {\n        console.error('获取诗词失败:', error);\n        this.isLoading = false;\n      }\n    },\n    async evaluatePoem() {\n      this.isLoading = true;\n      const userFilledPoem = this.poemLines.map((line, index) =>\n          line.split('').map((char, charIndex) =>\n              char === '*' ? this.userInputArray[index][charIndex] : char\n          ).join('')\n      ).join('');\n\n      try {\n        const response = await sendMessageToGpt(`评价提交的诗词: ${userFilledPoem}，并给出你的修改意见和原诗`, this.sessionId);\n        this.evaluation = response.data.content;\n        this.currentStage = 3;\n        this.isLoading = false;\n      } catch (error) {\n        console.error('评价诗词失败:', error);\n        this.isLoading = false;\n      }\n    },\n    restart() {\n      this.currentStage = 1;\n      this.poem = null;\n      this.userInputArray = [];\n      this.evaluation = '';\n    },\n  },\n};\n</script>\n\n<style scoped>\n.poem-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  height: 100vh;\n  background-color: #fdece4;\n  padding: 20px;\n\n}\n\n.header,\n.footer {\n  width: 100%;\n}\n\n.stage {\n  text-align: center;\n  width: 100%;\n}\n\n.stage-title {\n  font-size: 24px;\n  margin-bottom: 20px;\n  color: #333;\n}\n\n.theme-buttons {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-bottom: 20px;\n}\n\n.theme-button {\n  margin: 5px;\n  padding: 8px 15px;\n  font-size: 14px;\n  background-color: #f78f54;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n\n.theme-button:hover {\n  background-color: #d97242;\n}\n\n.poem-grid {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.poem-line {\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px;\n}\n\n.poem-char {\n  display: inline-block;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  text-align: center;\n  border-bottom: 1px solid #000;\n  margin: 0 2px;\n  font-size: 28px;\n}\n\n.poem-input {\n  width: 30px;\n  height: 30px;\n  text-align: center;\n  border: none;\n  border-bottom: 1px solid #000;\n  background-color: transparent;\n  font-size: 28px;\n  padding: 0;\n  margin: 0 2px;\n  outline: none;\n}\n\n.evaluate-button {\n  margin-top: 20px;\n  padding: 10px 20px;\n  font-size: 16px;\n  background-color: #f78f54;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-bottom: 40px;\n}\n\n.evaluate-button:hover {\n  background-color: #d97242;\n}\n\n.loading-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(255, 255, 255, 0.8);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.loading-spinner {\n  border: 4px solid rgba(0, 0, 0, 0.1);\n  border-left-color: #f78f54;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.loading-text {\n  margin-top: 20px;\n  font-size: 18px;\n  color: #333;\n}\n\n.evaluation {\n  max-width: 900px; /* 控制最大宽度，适合你的布局 */\n  word-wrap: break-word; /* 自动换行 */\n  font-size: 24px;\n  text-align: left; /* 左对齐 */\n  margin: 0 auto 40px;\n}\n\n.restart-button {\n  margin-top: 20px;\n  padding: 10px 20px;\n  font-size: 16px;\n  background-color: #f78f54;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-bottom: 40px;\n}\n\n.evaluate-button:hover {\n  background-color: #d97242;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}