{"ast":null,"code":"import { sendMessageToGpt } from '@/api/chatWithGpt';\nimport { v4 as uuidv4 } from 'uuid';\nexport default {\n  name: 'Chat',\n  data() {\n    return {\n      isChatting: false,\n      message: '',\n      recognition: null,\n      // 用于语音识别\n      sessionId: uuidv4()\n    };\n  },\n  methods: {\n    toggleChat() {\n      if (this.isChatting) {\n        this.stopListening();\n      } else {\n        this.startListening();\n        this.isChatting = true;\n      }\n    },\n    // 启动语音识别\n    startListening() {\n      // 检查浏览器是否支持 WebSpeech API\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      if (!SpeechRecognition) {\n        alert('该浏览器不支持 WebSpeech API。');\n        return;\n      }\n      this.recognition = new SpeechRecognition();\n      this.recognition.lang = 'zh-CN'; // 识别中文\n      this.recognition.continuous = false;\n      this.recognition.interimResults = false;\n      this.recognition.onresult = event => {\n        this.message = event.results[0][0].transcript;\n        console.log('识别到的语音内容:', this.message);\n        if (this.message.trim() !== '') {\n          this.sendMessage(); // 如果有内容，则发送消息\n        } else {\n          console.log('本轮无语音输入，不发送消息');\n        }\n        this.message = ''; // 重置message\n      };\n      this.recognition.onerror = event => {\n        console.error('本轮语音识别错误:', event.error);\n      };\n      this.recognition.onend = () => {\n        if (this.isChatting) {\n          console.log('本轮语音识别结束，重新开始Listening。');\n          this.startListening(); // 语音识别结束时重新开始监听\n        }\n      };\n      this.recognition.start();\n    },\n    stopListening() {\n      if (this.recognition) {\n        this.recognition.stop();\n      }\n      this.isChatting = false; // 停止聊天\n      console.log('语音识别已停止');\n    },\n    // 发送消息并处理响应\n    async sendMessage() {\n      if (this.message.trim() === '') return;\n      const sessionId = this.getSessionId(); // 根据你的会话管理实现此函数\n      try {\n        const response = await sendMessageToGpt(this.message, sessionId);\n        console.log(response.data.content);\n        this.speak(response.data.content); // 用语音输出GPT的响应\n      } catch (error) {\n        console.error('发送消息时出错:', error);\n      }\n    },\n    // 使用WebSpeech语音合成功能读取文本\n    speak(text) {\n      const synthesis = window.speechSynthesis;\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = 'zh-CN'; // 使用中文语音合成\n      // 开始播放语音合成\n      synthesis.speak(utterance);\n    },\n    // 获取会话ID的占位符函数\n    getSessionId() {\n      // 实现获取会话ID的逻辑\n      return 'session-id-placeholder';\n    }\n  }\n};","map":{"version":3,"names":["sendMessageToGpt","v4","uuidv4","name","data","isChatting","message","recognition","sessionId","methods","toggleChat","stopListening","startListening","SpeechRecognition","window","webkitSpeechRecognition","alert","lang","continuous","interimResults","onresult","event","results","transcript","console","log","trim","sendMessage","onerror","error","onend","start","stop","getSessionId","response","content","speak","text","synthesis","speechSynthesis","utterance","SpeechSynthesisUtterance"],"sources":["src/views/AI chat/Chat.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <main class=\"main-content\">\n      <div class=\"video-chat\">\n        <img src=\"@/assets/AIChat/video-chat.png\" alt=\"Video Chat\" class=\"video-image\" />\n        <div class=\"video-overlay\">\n          <p class=\"overlay-text\" v-if=\"!isChatting\">点击通话按钮与蓝心小v聊天</p>\n          <p class=\"overlay-text\" v-if=\"isChatting\">李奶奶您正在与蓝心小v进行聊天</p>\n          <p class=\"status-text\" v-show=\"isChatting\">正在通话中......</p>\n          <div class=\"call-buttons\">\n            <button\n                class=\"call-button\"\n                :class=\"isChatting ? 'red' : 'green'\"\n                @click=\"toggleChat\"\n            ></button>\n          </div>\n        </div>\n      </div>\n    </main>\n  </div>\n</template>\n\n<script>\nimport { sendMessageToGpt } from '@/api/chatWithGpt';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default {\n  name: 'Chat',\n  data() {\n    return {\n      isChatting: false,\n      message: '',\n      recognition: null, // 用于语音识别\n      sessionId: uuidv4(),\n    };\n  },\n  methods: {\n    toggleChat() {\n      if (this.isChatting) {\n        this.stopListening();\n      } else {\n        this.startListening();\n        this.isChatting = true;\n      }\n    },\n\n    // 启动语音识别\n    startListening() {\n      // 检查浏览器是否支持 WebSpeech API\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      if (!SpeechRecognition) {\n        alert('该浏览器不支持 WebSpeech API。');\n        return;\n      }\n\n      this.recognition = new SpeechRecognition();\n      this.recognition.lang = 'zh-CN'; // 识别中文\n      this.recognition.continuous = false;\n      this.recognition.interimResults = false;\n\n      this.recognition.onresult = (event) => {\n        this.message = event.results[0][0].transcript;\n        console.log('识别到的语音内容:', this.message);\n\n        if (this.message.trim() !== '') {\n          this.sendMessage(); // 如果有内容，则发送消息\n        } else {\n          console.log('本轮无语音输入，不发送消息');\n        }\n        this.message = '';   // 重置message\n      };\n\n      this.recognition.onerror = (event) => {\n        console.error('本轮语音识别错误:', event.error);\n      };\n\n      this.recognition.onend = () => {\n        if (this.isChatting) {\n          console.log('本轮语音识别结束，重新开始Listening。');\n          this.startListening();  // 语音识别结束时重新开始监听\n        }\n      };\n\n      this.recognition.start();\n    },\n\n    stopListening() {\n      if (this.recognition) {\n        this.recognition.stop();\n      }\n      this.isChatting = false;  // 停止聊天\n      console.log('语音识别已停止');\n    },\n\n    // 发送消息并处理响应\n    async sendMessage() {\n      if (this.message.trim() === '') return;\n\n      const sessionId = this.getSessionId(); // 根据你的会话管理实现此函数\n      try {\n        const response = await sendMessageToGpt(this.message, sessionId);\n        console.log(response.data.content);\n        this.speak(response.data.content); // 用语音输出GPT的响应\n      } catch (error) {\n        console.error('发送消息时出错:', error);\n      }\n    },\n\n    // 使用WebSpeech语音合成功能读取文本\n    speak(text) {\n      const synthesis = window.speechSynthesis;\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = 'zh-CN'; // 使用中文语音合成\n      // 开始播放语音合成\n      synthesis.speak(utterance);\n    },\n\n    // 获取会话ID的占位符函数\n    getSessionId() {\n      // 实现获取会话ID的逻辑\n      return 'session-id-placeholder';\n    },\n  },\n};\n</script>\n\n<style scoped>\n#app {\n  width: 100%;\n  height: 80%;\n  margin: 0 auto;\n  background-color: #ffe9e9;\n}\n\n.main-content {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: calc(100% - 160px);\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.video-chat {\n  position: relative;\n  width: 1184px;\n  height: 666px;\n  border-radius: 20px;\n  overflow: hidden;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.video-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.video-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: rgba(0, 0, 0, 0.2);\n}\n\n.overlay-text {\n  margin: 0;\n  padding: 10px 20px;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  border-radius: 10px;\n}\n\n.status-text {\n  margin: 20px 0;\n  padding: 10px 20px;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  border-radius: 10px;\n}\n\n.call-buttons {\n  display: flex;\n  margin-top: 20px;\n}\n\n.call-button {\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  border: none;\n  cursor: pointer;\n  background-size: cover;\n}\n\n.call-button.green {\n  background-image: url('@/assets/AIChat/call.png');\n}\n\n.call-button.red {\n  background-image: url('@/assets/AIChat/hangUp.png');\n}\n</style>"],"mappings":"AAuBA,SAAAA,gBAAA;AACA,SAAAC,EAAA,IAAAC,MAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,UAAA;MACAC,OAAA;MACAC,WAAA;MAAA;MACAC,SAAA,EAAAN,MAAA;IACA;EACA;EACAO,OAAA;IACAC,WAAA;MACA,SAAAL,UAAA;QACA,KAAAM,aAAA;MACA;QACA,KAAAC,cAAA;QACA,KAAAP,UAAA;MACA;IACA;IAEA;IACAO,eAAA;MACA;MACA,MAAAC,iBAAA,GAAAC,MAAA,CAAAD,iBAAA,IAAAC,MAAA,CAAAC,uBAAA;MACA,KAAAF,iBAAA;QACAG,KAAA;QACA;MACA;MAEA,KAAAT,WAAA,OAAAM,iBAAA;MACA,KAAAN,WAAA,CAAAU,IAAA;MACA,KAAAV,WAAA,CAAAW,UAAA;MACA,KAAAX,WAAA,CAAAY,cAAA;MAEA,KAAAZ,WAAA,CAAAa,QAAA,GAAAC,KAAA;QACA,KAAAf,OAAA,GAAAe,KAAA,CAAAC,OAAA,OAAAC,UAAA;QACAC,OAAA,CAAAC,GAAA,mBAAAnB,OAAA;QAEA,SAAAA,OAAA,CAAAoB,IAAA;UACA,KAAAC,WAAA;QACA;UACAH,OAAA,CAAAC,GAAA;QACA;QACA,KAAAnB,OAAA;MACA;MAEA,KAAAC,WAAA,CAAAqB,OAAA,GAAAP,KAAA;QACAG,OAAA,CAAAK,KAAA,cAAAR,KAAA,CAAAQ,KAAA;MACA;MAEA,KAAAtB,WAAA,CAAAuB,KAAA;QACA,SAAAzB,UAAA;UACAmB,OAAA,CAAAC,GAAA;UACA,KAAAb,cAAA;QACA;MACA;MAEA,KAAAL,WAAA,CAAAwB,KAAA;IACA;IAEApB,cAAA;MACA,SAAAJ,WAAA;QACA,KAAAA,WAAA,CAAAyB,IAAA;MACA;MACA,KAAA3B,UAAA;MACAmB,OAAA,CAAAC,GAAA;IACA;IAEA;IACA,MAAAE,YAAA;MACA,SAAArB,OAAA,CAAAoB,IAAA;MAEA,MAAAlB,SAAA,QAAAyB,YAAA;MACA;QACA,MAAAC,QAAA,SAAAlC,gBAAA,MAAAM,OAAA,EAAAE,SAAA;QACAgB,OAAA,CAAAC,GAAA,CAAAS,QAAA,CAAA9B,IAAA,CAAA+B,OAAA;QACA,KAAAC,KAAA,CAAAF,QAAA,CAAA9B,IAAA,CAAA+B,OAAA;MACA,SAAAN,KAAA;QACAL,OAAA,CAAAK,KAAA,aAAAA,KAAA;MACA;IACA;IAEA;IACAO,MAAAC,IAAA;MACA,MAAAC,SAAA,GAAAxB,MAAA,CAAAyB,eAAA;MACA,MAAAC,SAAA,OAAAC,wBAAA,CAAAJ,IAAA;MACAG,SAAA,CAAAvB,IAAA;MACA;MACAqB,SAAA,CAAAF,KAAA,CAAAI,SAAA;IACA;IAEA;IACAP,aAAA;MACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}